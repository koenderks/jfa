[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team k.derks@nyenrode.nl. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to jfa","title":"Contributing to jfa","text":"jfa open-source project love receive contributions community! many ways contribute, improving documentation, submitting bug reports feature requests writing code can incorporated jfa .","code":""},{"path":"/CONTRIBUTING.html","id":"bug-reports","dir":"","previous_headings":"","what":"Bug reports","title":"Contributing to jfa","text":"think found bug jfa, first make sure testing latest version jfa - issue may already fixed. , search issues list GitHub case similar issue already opened. helpful can prepare reproduction bug. words, provide small test case can run confirm bug. makes easier find problem fix .","code":""},{"path":"/CONTRIBUTING.html","id":"feature-requests","dir":"","previous_headings":"","what":"Feature requests","title":"Contributing to jfa","text":"find wishing feature doesn’t exist jfa, probably alone. bound others similar needs. Open issue issues list GitHub describes feature like see, need , work.","code":""},{"path":"/CONTRIBUTING.html","id":"contributing-code-to-jfa","dir":"","previous_headings":"","what":"Contributing code to jfa","title":"Contributing to jfa","text":"can also contribute code (form new methods benchmarks) jfa. See pages contribute. set jfa repository add benchmark jfa add new method jfa","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/jfa.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Get started","text":"concretely illustrate jfa‘s functionality, consider BuildIt data set included package (info, see ?BuildIt). data set contains population 3500 invoices paid fictional ’BuildIt’ construction company. invoice identification number (ID), recorded value (bookValue), corresponding audit (true) value (auditValue). Note: information auditValue column added illustrative purposes since known auditor inspected sample invoices. First, load jfa package BuildIt data set. first 10 invoices data set displayed . fully illustrated walkthrough jfa’s workflow functionality using BuildIt data set, see Workflow: Classical audit sampling. Bayesian version illustrated walkthrough, see Workflow: Bayesian audit sampling.","code":"library(jfa)  data('BuildIt') head(BuildIt, n = 10) ##       ID bookValue auditValue ## 1  82884    242.61     242.61 ## 2  25064    642.99     642.99 ## 3  81235    628.53     628.53 ## 4  71769    431.87     431.87 ## 5  55080    620.88     620.88 ## 6  93224    501.76     501.76 ## 7  24331    466.01     466.01 ## 8  81460    295.20     295.20 ## 9  14608    216.48     216.48 ## 10 79064    243.43     243.43"},{"path":"/articles/jfa.html","id":"optional-using-auditprior-the-basics","dir":"Articles","previous_headings":"","what":"(Optional) Using auditPrior(): The basics","title":"Get started","text":"auditPrior() function can used create prior distribution misstatement parameter statistical audit sampling model. audit sampling context, advantage Bayesian inference prior distribution can used incorporate existing information statistical procedure. Incorporating existing information can potentially yield decrease sample size increase efficiency. type audit information can incorporated depends information available context audit. See vignette Planning: Prior distributions accompanying article detailed explanation types audit information jfa able incorporate prior distribution. prior distribution hand, Bayesian audit sampling can performed providing object returned auditPrior() function input prior argument subsequent calls planning() evaluation() functions.","code":""},{"path":"/articles/jfa.html","id":"using-planning-the-basics","dir":"Articles","previous_headings":"","what":"Using planning(): The basics","title":"Get started","text":"Planning minimum sample size requires knowledge conditions lead acceptance population (.e., sampling objectives). Generally, sampling objective can one () following: Hypothesis testing: Obtain measures evidence claim misstatement population lower given performance materiality (.e., maximum tolerable misstatement). Estimation: Obtain measures accuracy claim misstatement population certain value (minimum precision). Next determining sampling objective(s), also important determine statistical distribution linking sample outcomes population misstatement (e.g., poisson, binomial, hypergeometric). three distributions standard audit sampling context (approximations) hypergeometric distribution, poisson default jfa conservative. Lastly, advised obtain knowledge expected (tolerable) errors sample. strongly recommended set value expected errors sample conservatively minimize chance observed errors sample exceeding expected errors, imply insufficient work done end. BuildIt data set, booked amounts (monetary values) invoice population given, auditor may want make statement amount misstatement population. illustrative purposes tolerate zero misstatements sample.","code":""},{"path":"/articles/jfa.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"Using planning(): The basics","what":"Hypothesis testing","title":"Get started","text":"First, let’s take look can use planning() function calculate minimum sample size testing hypothesis misstatement population lower performance materiality. example performance materiality set 5% total population value, meaning population may contain 5% misstatement. Sampling objective: Calculate minimum sample size , misstatements found sample, 95% chance misstatement population lower 5% population value. minimum sample size sampling objective can calculated specifying materiality parameter planning() function, see code . Next, summary statistical results can obtained using summary() function. results show , given zero tolerable errors, minimum sample size 60 units.","code":"stage1 <- planning(materiality = 0.05, expected = 0, likelihood = 'poisson', conf.level = 0.95) summary(stage1) ##  ##  Classical Audit Sample Planning Summary ##  ## Options: ##   Confidence level:              0.95  ##   Materiality:                   0.05  ##   Hypotheses:                    H₀: Θ >= 0.05 vs. H₁: Θ < 0.05  ##   Expected:                      0  ##   Likelihood:                    poisson  ##  ## Results: ##   Minimum sample size:           60  ##   Tolerable errors:              0  ##   Expected most likely error:    0  ##   Expected upper bound:          0.049929  ##   Expected precision:            0.049929  ##   Expected p-value:              < 2.22e-16"},{"path":"/articles/jfa.html","id":"estimation","dir":"Articles","previous_headings":"Using planning(): The basics","what":"Estimation","title":"Get started","text":"Next, let’s take look can use planning() function calculate minimum sample size estimating misstatement population minimum precision. precision defined difference likely misstatement upper confidence bound misstatement. example, minimum precision set 2% population value. Sampling objective: Calculate minimum sample size , zero misstatements found sample, 95% chance misstatement population 2% likely misstatement. minimum sample size sampling objective can calculated specifying min.precision parameter planning() function, see code . results show , given zero tolerable errors, minimum sample size 150 units.","code":"stage1 <- planning(min.precision = 0.02, expected = 0, likelihood = 'poisson', conf.level = 0.95) summary(stage1) ##  ##  Classical Audit Sample Planning Summary ##  ## Options: ##   Confidence level:              0.95  ##   Min. precision:                0.02  ##   Expected:                      0  ##   Likelihood:                    poisson  ##  ## Results: ##   Minimum sample size:           150  ##   Tolerable errors:              0  ##   Expected most likely error:    0  ##   Expected upper bound:          0.019971  ##   Expected precision:            0.019971"},{"path":"/articles/jfa.html","id":"using-selection-the-basics","dir":"Articles","previous_headings":"","what":"Using selection(): The basics","title":"Get started","text":"Selecting sample using selection() function requires knowledge units population eligible selection (.e., sampling units). Sampling units can items monetary units. Items can selected population using record sampling (also known attribute sampling item sampling) units = 'items'. hand, monetary units can selected population using monetary unit sampling (MUS) units = 'values'. sampling units determined also determined method used select units (.e., selection method). Sampling units can selected fixed interval sampling (also known systematic sampling) scheme using method = 'interval' (default), cell sampling scheme using method = 'cell', using random sampling using method = 'random', using modified sieve sampling method = 'sieve'. See vignette Selection: Sampling methodology detailed explanation selection methods implemented jfa.","code":""},{"path":"/articles/jfa.html","id":"record-sampling","dir":"Articles","previous_headings":"Using selection(): The basics","what":"Record sampling","title":"Get started","text":"First, let’s take look selection() function can used perform random record sampling. Random record sampling implies sampling units set items selection method set random. code selects 60 planned invoices BuildIt data set using random record sampling scheme.","code":"set.seed(1) stage2 <- selection(data = BuildIt, size = 60, units = 'items', method = 'random') summary(stage2) ##  ##  Audit Sample Selection Summary ##  ## Options: ##   Requested sample size:         60  ##   Sampling units:                items  ##   Method:                        random sampling  ##  ## Data: ##   Population size:               3500  ##  ## Results: ##   Selected sampling units:       60  ##   Selected items:                60  ##   Proportion of size:            0.017143"},{"path":"/articles/jfa.html","id":"monetary-unit-sampling-mus","dir":"Articles","previous_headings":"Using selection(): The basics","what":"Monetary unit sampling (MUS)","title":"Get started","text":"Next, let’s take look selection() function can used perform fixed interval monetary unit sampling. Fixed interval monetary unit sampling implies sampling units set values selection method set interval. code selects 150 monetary units BuildIt data set using fixed interval monetary unit sampling scheme.","code":"stage2 <- selection(data = BuildIt, size = 150, units = 'values', method = 'interval', values = 'bookValue') summary(stage2) ##  ##  Audit Sample Selection Summary ##  ## Options: ##   Requested sample size:         150  ##   Sampling units:                monetary units  ##   Method:                        fixed interval sampling  ##   Starting point:                1  ##  ## Data: ##   Population size:               3500  ##   Population value:              1403221  ##   Selection interval:            9354.8  ##  ## Results: ##   Selected sampling units:       150  ##   Proportion of value:           0.0001069  ##   Selected items:                150  ##   Proportion of size:            0.042857"},{"path":"/articles/jfa.html","id":"extracting-the-sample","dir":"Articles","previous_headings":"Using selection(): The basics","what":"Extracting the sample","title":"Get started","text":"selected units corresponding items stored object returned selection() function. sample can extracted object indexing via $sample, see code . step auditor annotate sample.","code":"set.seed(1) stage2 <- selection(data = BuildIt, size = 60, units = 'items', method = 'random')  sample <- stage2$sample head(sample, n = 10) ##     row times    ID bookValue auditValue ## 1  1017     1 50755    618.24     618.24 ## 2   679     1 20237    669.75     669.75 ## 3  2177     1  9517    454.02     454.02 ## 4   930     1 85674    257.82     257.82 ## 5  1533     1 31051    308.53     308.53 ## 6   471     1 84375    824.66     824.66 ## 7  2347     1 75616    623.70     623.70 ## 8   270     1 82033    352.75     352.75 ## 9  1211     1 12877     52.89      52.89 ## 10 3379     1 85322    330.24     330.24"},{"path":"/articles/jfa.html","id":"using-evaluation-the-basics","dir":"Articles","previous_headings":"","what":"Using evaluation(): The basics","title":"Get started","text":"annotating items sample audit values can perform statistical inference misstatement population evaluation() function. Next data sample input, function can also used summary statistics data sample (e.g., sample size number errors) available. elaborate explanation output function sampling objective, see package vignettes Evaluation: Testing misstatement Evaluation: Estimating misstatement.","code":""},{"path":"/articles/jfa.html","id":"summary-statistics","dir":"Articles","previous_headings":"Using evaluation(): The basics","what":"Summary statistics","title":"Get started","text":"First, let’s take look evaluation() function can combined summary statistics sample. Suppose previously selected sample 60 invoices found single invoice missing autograph. summary statistics can provided evaluation() function x = 1 n = 60. function also requires specify sampling objectives using materiality min.precision arguments. , performance materiality 5% applies. results indicate likely error population 1.66%. Moreover, 95% one-sided confidence interval population misstatement ranges 0% 7.9% contains performance materiality. implies reject hypothesis population misstatement lower 5%, also indicated non-significant p value (p = 0.199).","code":"stage4 <- evaluation(materiality = 0.05, method = 'poisson', conf.level = 0.95, x = 1, n = 60) summary(stage4) ##  ##  Classical Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    0.05  ##   Materiality:                    0.05  ##   Hypotheses:                     H₀: Θ >= 0.05 vs. H₁: Θ < 0.05  ##   Method:                         poisson  ##  ## Data: ##   Sample size:                    60  ##   Number of errors:               1  ##   Sum of taints:                  1  ##  ## Results: ##   Most likely error:              0.016667  ##   95 percent confidence interval: [0, 0.079064]  ##   Precision:                      0.062398  ##   p-value:                        0.19915"},{"path":"/articles/jfa.html","id":"data-sample","dir":"Articles","previous_headings":"Using evaluation(): The basics","what":"Data sample","title":"Get started","text":"Next, let’s take look evaluation() function can combined data sample. Returning annotated sample selection() function, suppose previously selected sample 60 invoices found single invoice true value deviates booked value. data can provided evaluation() function using data, values, values.audit, times arguments. method argument determines method inference. example, code evaluates misstatement population using commonly used Stringer bound. can find information evaluation methods implemented home page. results indicate likely error population 1%. Moreover, 95% one-sided confidence interval population misstatement ranges 0% 6.5% contains performance materiality. stringer method provide p value hypothesis testing.","code":"sample$auditValue    <- sample$bookValue sample$auditValue[1] <- sample$auditValue[1] - 100 stage4 <- evaluation(materiality = 0.05, method = 'stringer', conf.level = 0.95,                      data = sample, values = 'bookValue', values.audit = 'auditValue',                      times = 'times') summary(stage4) ##  ##  Classical Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    0.05  ##   Method:                         stringer  ##  ## Data: ##   Sample size:                    60  ##   Number of errors:               1  ##   Sum of taints:                  0.1617495  ##  ## Results: ##   Most likely error:              0.0026958  ##   95 percent confidence interval: [0, 0.053222]  ##   Precision:                      0.050526"},{"path":"/articles/jfa.html","id":"using-report-the-basics","dir":"Articles","previous_headings":"","what":"Using report(): The basics","title":"Get started","text":"results evaluation() function hand, call report() function automatically generates report containing data, statistical results interpretation, conclusion sampling procedure respect sampling objectives. object returned evaluation() function can supplied directly report() function, see code .","code":"stage4 <- evaluation(materiality = 0.05, method = 'stringer', conf.level = 0.95,                      data = sample, values = 'bookValue', values.audit = 'auditValue',                      times = 'times')  report(stage4, file = 'report.html', format = 'html_document') # Generates .html report"},{"path":"/articles/v1_sampling_workflow.html","id":"scenario","dir":"Articles","previous_headings":"","what":"Scenario","title":"Workflow: Classical audit sampling","text":"vignette aims show jfa package facilitates auditors standard audit sampling workflow (hereafter “audit workflow”). example audit workflow, consider case BuildIt. BuildIt fictional construction company United States audited Laura, external auditor fictional audit firm. end year, BuildIt provided summary financial situation financial statements. Laura’s job auditor formulate opinion fairness correctness BuildIt’s financial statements. Therefore, Laura needs obtain sufficient appropriate evidence claim misstatement financial statements lower certain amount: materiality. financial statements contain errors considered material, means errors financial statements large enough might influence decision someone relying financial statements. Laura, materiality set 5% total value financial statements. Since BuildIt small company, single population upon financial statements based. Therefore, laura can use materiality overall financial statements performance materiality single population. Specifically, BuildIt’s population consists 3500 items. However, assessing details population, Laura performed test BuildIt internal control systems found quite reliable. order formulate opinion misstatement population, Laura separates audit workflow four stages. First, plan size subset needs inspect financial statements make well-substantiated inference whole. Second, select required subset financial statements. Third, inspect selected subset determines audit (true) value items. Fourth, use information inspected subset make inference misstatement population (e.g., case also financial statements whole). start workflow, Laura first loads BuildIt’s financial statements R.","code":"library(jfa) data(\"BuildIt\")"},{"path":"/articles/v1_sampling_workflow.html","id":"setting-up-the-audit","dir":"Articles","previous_headings":"","what":"Setting up the audit","title":"Workflow: Classical audit sampling","text":"Laura wants make statement , 95% confidence, misstatement financial statements lower performance materiality 5%. Based last year’s audit BuildIt, upper bound misstatement turned 2.5%, wants tolerate 2.5% errors intended sample. Laura can therefore re-formulate statistical statement wants conclude , 2.5% errors found sample, can conclude 95% confidence, misstatement population lower materiality 5%. , Laura defines materiality, confidence level, expected errors. Many audits performed according audit risk model (ARM), determines uncertainty Laura’s statement whole (1 - confidence) factor three terms: inherent risk, control risk, detection risk. Inherent risk risk posed error BuildIt’s financial statement material, consideration related control systems (e.g., computer systems). Control risk risk material misstatement prevented detected BuildIt’s internal control systems. Detection risk risk Laura fail find material misstatements exist BuildIt’s financial statements. ARM practically useful given level audit risk, tolerable detection risk bears inverse relation two risks. ARM useful Laura enables incorporate prior knowledge BuildIt’s organization increase required risk fail find material misstatements. According ARM, audit risk retained. \\[ \\text{Audit risk} = \\text{Inherent risk} \\,\\times\\, \\text{Control risk} \\,\\times\\, \\text{Detection risk}\\] Usually auditor judges inherent risk control risk three-point scale consisting low, medium, high. Different audit firms handle different standard percentages categories. Laura’s firm defines probabilities low, medium, high respectively 50%, 60%, 100%. Laura performed testing BuildIt’s computer systems, assesses control risk medium (60%).","code":"# Specify the confidence, materiality, and expected errors. confidence  <- 0.95   # 95% materiality <- 0.05   # 5% expected    <- 0.025  # 2.5% # Specify the inherent risk (ir) and control risk (cr). ir <- 1     # 100% cr <- 0.6   # 60%"},{"path":"/articles/v1_sampling_workflow.html","id":"stage-1-planning-an-audit-sample","dir":"Articles","previous_headings":"","what":"Stage 1: Planning an audit sample","title":"Workflow: Classical audit sampling","text":"Laura can choose either perform frequentist analysis, uses increased detection risk level uncertainty, perform Bayesian analysis, captures information control risk prior distribution. example, show Laura performs frequentist analysis. frequentist audit, Laura immediately uses adjusted confidence calculate sample size using planning() function. Laura can inspect result planning procedure using summary() function. result tells , given prior distribution needs audit sample 178 items , 4.45 errors found, can conclude 91.66% confidence maximum error BuildIt’s financial statements lower materiality 5%.","code":"# Adjust the required confidence for a frequentist analysis. c.adj <- 1 - ((1 - confidence) / (ir * cr)) # Step 1: Calculate the required sample size. stage1 <- planning(materiality = materiality, expected = expected, conf.level = c.adj) summary(stage1) ##  ##  Classical Audit Sample Planning Summary ##  ## Options: ##   Confidence level:              0.91667  ##   Materiality:                   0.05  ##   Hypotheses:                    H₀: Θ >= 0.05 vs. H₁: Θ < 0.05  ##   Expected:                      0.025  ##   Likelihood:                    poisson  ##  ## Results: ##   Minimum sample size:           178  ##   Tolerable errors:              4.45  ##   Expected most likely error:    0.025  ##   Expected upper bound:          0.049986  ##   Expected precision:            0.024986  ##   Expected p-value:              < 2.22e-16"},{"path":"/articles/v1_sampling_workflow.html","id":"stage-2-selecting-a-sample","dir":"Articles","previous_headings":"","what":"Stage 2: Selecting a sample","title":"Workflow: Classical audit sampling","text":"Laura now ready select required 178 items financial statements. can choose according one two statistical methods. record sampling (units = \"items\"), inclusion probabilities assigned item level, treating items high value low value , items $5,000 equally likely selected item $1,000. monetary unit sampling (units = \"values\"), inclusion probabilities assigned level individual monetary units (e.g., dollar). dollar selected sample, item includes dollar selected. favors higher items, items $5,000 five times likely selected item $1,000. Laura chooses use monetary unit sampling, wants include high-valued items. selection() function allows sample financial statements. uses stage1 object input selection() function. Laura can inspect outcomes sampling procedure using summary() function.","code":"# Step 2: Draw a sample from the financial statements. stage2 <- selection(data = BuildIt, size = stage1, units = \"values\", values = \"bookValue\", method = 'interval') summary(stage2) ##  ##  Audit Sample Selection Summary ##  ## Options: ##   Requested sample size:         178  ##   Sampling units:                monetary units  ##   Method:                        fixed interval sampling  ##   Starting point:                1  ##  ## Data: ##   Population size:               3500  ##   Population value:              1403221  ##   Selection interval:            7883.3  ##  ## Results: ##   Selected sampling units:       178  ##   Proportion of value:           0.0001269  ##   Selected items:                178  ##   Proportion of size:            0.050857"},{"path":"/articles/v1_sampling_workflow.html","id":"stage-3-executing-the-audit","dir":"Articles","previous_headings":"","what":"Stage 3: Executing the audit","title":"Workflow: Classical audit sampling","text":"selected sample can isolated indexing sample object sampling result. Now Laura can execute audit annotating sample audit value (exampling writing sample .csv file using write.csv(). can load annotated sample back R evaluation. example, audit values sample already included auditValue column data set .","code":"# Step 3: Isolate the sample for execution of the audit. sample <- stage2$sample  # To write the sample to a .csv file: # write.csv(x = sample, file = \"auditSample.csv\", row.names = FALSE)  # To load annotated sample back into R: # sample <- read.csv(file = \"auditSample.csv\")"},{"path":"/articles/v1_sampling_workflow.html","id":"stage-4-evaluating-the-sample","dir":"Articles","previous_headings":"","what":"Stage 4: Evaluating the sample","title":"Workflow: Classical audit sampling","text":"Using annotated sample, Laura can perform inference evaluation() function. Laura can inspect outcomes inference using summary() function. resulting 91.66% upper bound 1.396%, lower materiality 5%. output tells Laura correct conclusion immediately.","code":"# Step 4: Evaluate the sample stage4 <- evaluation(materiality = materiality, conf.level = c.adj, data = sample,                       values = 'bookValue', values.audit = 'auditValue') summary(stage4) ##  ##  Classical Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.91667  ##   Materiality:                    0.05  ##   Materiality:                    0.05  ##   Hypotheses:                     H₀: Θ >= 0.05 vs. H₁: Θ < 0.05  ##   Method:                         poisson  ##  ## Data: ##   Sample size:                    178  ##   Number of errors:               0  ##   Sum of taints:                  0  ##  ## Results: ##   Most likely error:              0  ##   91.66667 percent confidence interval: [0, 0.01396]  ##   Precision:                      0.01396  ##   p-value:                        0.00013639"},{"path":"/articles/v1_sampling_workflow.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Workflow: Classical audit sampling","text":"Since 91.66% upper confidence bound misstatement population lower performance materiality Laura obtained sufficient evidence conclude less 5% risk population contains material misstatement.","code":""},{"path":"/articles/v2_bayesian_sampling_workflow.html","id":"scenario","dir":"Articles","previous_headings":"","what":"Scenario","title":"Workflow: Bayesian audit sampling","text":"vignette aims show jfa package facilitates auditors standard audit sampling workflow (hereafter “audit workflow”). example audit workflow, consider case BuildIt. BuildIt fictional construction company United States audited Laura, external auditor fictional audit firm. end year, BuildIt provided summary financial situation financial statements. Laura’s job auditor formulate opinion fairness correctness BuildIt’s financial statements. Therefore, Laura needs obtain sufficient appropriate evidence claim misstatement financial statements lower certain amount: materiality. financial statements contain errors considered material, means errors financial statements large enough might influence decision someone relying financial statements. Laura, materiality set 5% total value financial statements. Since BuildIt small company, single population upon financial statements based. Therefore, laura can use materiality overall financial statements performance materiality single population. Specifically, BuildIt’s population consists 3500 items. However, assessing details population, Laura performed test BuildIt internal control systems found quite reliable. order formulate opinion misstatement population, Laura separates audit workflow four stages. First, plan size subset needs inspect financial statements make well-substantiated inference whole. Second, select required subset financial statements. Third, inspect selected subset determines audit (true) value items. Fourth, use information inspected subset make inference misstatement population (e.g., case also financial statements whole). start workflow, Laura first loads BuildIt’s financial statements R.","code":"library(jfa) data(\"BuildIt\")"},{"path":"/articles/v2_bayesian_sampling_workflow.html","id":"setting-up-the-audit","dir":"Articles","previous_headings":"","what":"Setting up the audit","title":"Workflow: Bayesian audit sampling","text":"Laura wants make statement , 95% confidence, misstatement financial statements lower performance materiality 5%. Based last year’s audit BuildIt, upper bound misstatement turned 2.5%, wants tolerate 2.5% errors intended sample. Laura can therefore re-formulate statistical statement wants conclude , 2.5% errors found sample, can conclude 95% confidence, misstatement population lower materiality 5%. , Laura defines materiality, confidence level, expected errors. Many audits performed according audit risk model (ARM), determines uncertainty Laura’s statement whole (1 - confidence) factor three terms: inherent risk, control risk, detection risk. Inherent risk risk posed error BuildIt’s financial statement material, consideration related control systems (e.g., computer systems). Control risk risk material misstatement prevented detected BuildIt’s internal control systems. Detection risk risk Laura fail find material misstatements exist BuildIt’s financial statements. ARM practically useful given level audit risk, tolerable detection risk bears inverse relation two risks. ARM useful Laura enables incorporate prior knowledge BuildIt’s organization increase required risk fail find material misstatements. According ARM, audit risk retained. \\[ \\text{Audit risk} = \\text{Inherent risk} \\,\\times\\, \\text{Control risk} \\,\\times\\, \\text{Detection risk}\\] Usually auditor judges inherent risk control risk three-point scale consisting low, medium, high. Different audit firms handle different standard percentages categories. Laura’s firm defines probabilities low, medium, high respectively 50%, 60%, 100%. Laura performed testing BuildIt’s computer systems, assesses control risk medium (60%).","code":"# Specify the confidence, materiality, and expected errors. confidence  <- 0.95   # 95% materiality <- 0.05   # 5% expected    <- 0.025  # 2.5% # Specify the inherent risk (ir) and control risk (cr). ir <- 1     # 100% cr <- 0.6   # 60%"},{"path":"/articles/v2_bayesian_sampling_workflow.html","id":"stage-1-planning-an-audit-sample","dir":"Articles","previous_headings":"","what":"Stage 1: Planning an audit sample","title":"Workflow: Bayesian audit sampling","text":"Laura can choose either perform frequentist analysis, uses increased detection risk level uncertainty, perform Bayesian analysis, captures information control risk prior distribution. example, show Laura performs Bayesian analysis. frequentist analysis can easily done following functions setting prior = FALSE. frequentist audit, Laura immediately starts step 1 uses value adjustedConfidence new value confidence. However, Bayesian audit, Laura starts step 0 defining prior distribution corresponds assessment control risk. assumes likelihood sample \\(n\\) observations, \\(k\\) error, poisson. Using auditPrior() function, can create prior distribution incorporates information risk assessments ARM. information done, see Derks et al. (2019). Laura can inspect resulting prior distribution summary() function. prior distribution can shown using plot() function.  Now prior distribution specified, Laura can calculate required sample size desired statement using planning() function. uses prior object input planning() function use prior distribution. Laura can inspect result planning procedure using summary() function. result tells , given prior distribution needs audit sample 178 transactions , 4.45 errors found, can conclude 95% confidence maximum error BuildIt’s financial statements lower materiality 5%. Laura can inspect prior distribution compares expected posterior distribution using plot() function. expected posterior distribution posterior distribution occur Laura actually observed sample 178 transactions, 4.45 error.","code":"# Adjust the required confidence for a frequentist analysis. c.adj <- 1 - ((1 - confidence) / (ir * cr)) # Step 0: Create a prior distribution according to the audit risk model. prior <- auditPrior(method = \"arm\", likelihood = \"poisson\", expected = expected,                     materiality = materiality, ir = ir, cr = cr) summary(prior) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    poisson  ##   Specifics:                     ir = 1; cr = 0.6; dr = 0.0833333  ##  ## Results: ##   Functional form:               gamma(α = 2.325, β = 53)  ##   Equivalent sample size:        53  ##   Equivalent errors:             1.325  ##   Mode:                          0.025  ##   Mean:                          0.043868  ##   Median:                        0.037764  ##   Variance:                      0.0008277  ##   Skewness:                      1.3117  ##   95 percent upper bound:        0.099289  ##   Precision:                     0.074289 plot(prior) # Step 1: Calculate the required sample size. stage1 <- planning(materiality = materiality, expected = expected, conf.level = confidence, prior = prior) summary(stage1) ##  ##  Bayesian Audit Sample Planning Summary ##  ## Options: ##   Confidence level:              0.95  ##   Materiality:                   0.05  ##   Hypotheses:                    H₀: Θ > 0.05 vs. H₁: Θ < 0.05  ##   Expected:                      0.025  ##   Likelihood:                    poisson  ##   Prior distribution:            gamma(α = 2.325, β = 53)  ##  ## Results: ##   Minimum sample size:           178  ##   Tolerable errors:              4.45  ##   Posterior distribution:        gamma(α = 6.775, β = 231)  ##   Expected most likely error:    0.025  ##   Expected upper bound:          0.049981  ##   Expected precision:            0.024981  ##   Expected BF₁₀:                  9.6614 plot(stage1)"},{"path":"/articles/v2_bayesian_sampling_workflow.html","id":"stage-2-selecting-a-sample","dir":"Articles","previous_headings":"","what":"Stage 2: Selecting a sample","title":"Workflow: Bayesian audit sampling","text":"Laura now ready select required 178 transactions financial statements. can choose according one two statistical methods. record sampling (units = \"items\"), inclusion probabilities assigned transaction level, treating transactions high value low value , transaction $5,000 equally likely selected transaction $1,000. monetary unit sampling (units = \"values\"), inclusion probabilities assigned level individual monetary units (e.g., dollar). dollar selected sample, transaction includes dollar selected. favors higher transactions, transaction $5,000 five times likely selected transaction $1,000. Laura chooses use monetary unit sampling, wants include high-valued transactions. selection() function allows sample financial statements. uses stage1 object input selection() function. Laura can inspect outcomes sampling procedure using summary() function.","code":"# Step 2: Draw a sample from the financial statements. stage2 <- selection(data = BuildIt, size = stage1, units = \"values\", values = \"bookValue\", method = 'interval') summary(stage2) ##  ##  Audit Sample Selection Summary ##  ## Options: ##   Requested sample size:         178  ##   Sampling units:                monetary units  ##   Method:                        fixed interval sampling  ##   Starting point:                1  ##  ## Data: ##   Population size:               3500  ##   Population value:              1403221  ##   Selection interval:            7883.3  ##  ## Results: ##   Selected sampling units:       178  ##   Proportion of value:           0.0001269  ##   Selected items:                178  ##   Proportion of size:            0.050857"},{"path":"/articles/v2_bayesian_sampling_workflow.html","id":"stage-3-executing-the-audit","dir":"Articles","previous_headings":"","what":"Stage 3: Executing the audit","title":"Workflow: Bayesian audit sampling","text":"selected sample can isolated indexing sample object sampling result. Now Laura can execute audit annotating sample audit value (exampling writing sample .csv file using write.csv(). can load annotated sample back R evaluation. example, audit values sample already included auditValue column data set .","code":"# Step 3: Isolate the sample for execution of the audit. sample <- stage2$sample  # To write the sample to a .csv file: # write.csv(x = sample, file = \"auditSample.csv\", row.names = FALSE)  # To load annotated sample back into R: # sample <- read.csv(file = \"auditSample.csv\")"},{"path":"/articles/v2_bayesian_sampling_workflow.html","id":"stage-4-evaluating-the-sample","dir":"Articles","previous_headings":"","what":"Stage 4: Evaluating the sample","title":"Workflow: Bayesian audit sampling","text":"Using annotated sample, Laura can perform inference evaluation() function. passing priorResult object function, automatically sets method = \"binomial\" consistent prior distribution. Laura can inspect outcomes inference using summary() function. resulting upper bound 2.278%, lower materiality 5%. output tells Laura correct conclusion immediately. can inspect prior posterior distribution using plot() function. shaded area quantifies area posterior distribution contains 95% probability, ends 2.278%. Therefore, Laura can state 95% probability misstatement BuildIt’s population lower 2.278%.","code":"# Step 4: Evaluate the sample. stage4 <- evaluation(materiality = materiality, conf.level = confidence, data = sample,                       values = \"bookValue\", values.audit = \"auditValue\", prior = prior) summary(stage4) ##  ##  Bayesian Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    0.05  ##   Materiality:                    0.05  ##   Hypotheses:                     H₀: Θ > 0.05 vs. H₁: Θ < 0.05  ##   Method:                         poisson  ##   Prior distribution:             gamma(α = 2.325, β = 53)  ##  ## Data: ##   Sample size:                    178  ##   Number of errors:               0  ##   Sum of taints:                  0  ##  ## Results: ##   Posterior distribution:         gamma(α = 2.325, β = 231)  ##   Most likely error:              0.0057359  ##   95 percent credible interval:   [0, 0.022781]  ##   Precision:                      0.017045  ##   BF₁₀:                            2179.8 plot(stage4)"},{"path":"/articles/v2_bayesian_sampling_workflow.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Workflow: Bayesian audit sampling","text":"Since 95% upper confidence bound misstatement population lower performance materiality Laura obtained sufficient evidence conclude less 5% risk population contains material misstatement.","code":""},{"path":"/articles/v3_prior_distributions.html","id":"bayesian-inference","dir":"Articles","previous_headings":"","what":"Bayesian inference","title":"Planning: Prior distributions","text":"Bayesian statistics allows incorporate existing information sampling procedure revise information using information sample. use prior distribution can potentially decrease amount audit work required achieve desired assurance, thereby increasing efficiency auditor. example, information auditee’s internal controls indicates low-risk profile, may build information require less evidence substantive testing. aware information incorporate statistical analysis justified.","code":""},{"path":"/articles/v3_prior_distributions.html","id":"prior-probability-distributions","dir":"Articles","previous_headings":"Bayesian inference","what":"Prior probability distributions","title":"Planning: Prior distributions","text":"Bayesian statistics incorporates existing information sampling procedure using prior probability distribution. prior distribution probability distribution reflects existing information misstatement population. prior distribution based existing information, usually created auditor starts planning sample.","code":""},{"path":"/articles/v3_prior_distributions.html","id":"constructing-a-prior-distribution","dir":"Articles","previous_headings":"","what":"Constructing a prior distribution","title":"Planning: Prior distributions","text":"information can incorporated prior distribution depends type information available, quality information, situation hand. auditor decided kind information want incorporate prior distribution, can use auditPrior() function calculate corresponding parameters prior distribution. discuss various types audit information jfa able incorporate prior distribution. First, set default options confidence, performance materiality, likelihood, expected errors sample.","code":"confidence  <- 0.95       # 95% confidence likelihood  <- 'binomial' # Binomial likelihood materiality <- 0.05       # Performance materiality of 5% expected    <- 0.01       # 1% errors expected in sample"},{"path":"/articles/v3_prior_distributions.html","id":"minimal-information-priors-method-default","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Minimal information priors (method = 'default')","title":"Planning: Prior distributions","text":"can construct prior distribution minimal information using method = 'default'. example, code incorporates minimal information prior distribution. can visually inspect prior distribution using plot() function.","code":"prior1 <- auditPrior(method = 'default', likelihood = likelihood, expected = expected, conf.level = confidence) summary(prior1) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     noninformative  ##  ## Results: ##   Functional form:               beta(α = 1, β = 1)  ##   Equivalent sample size:        1  ##   Equivalent errors:             0  ##   Mode:                          NaN  ##   Mean:                          0.5  ##   Median:                        0.5  ##   Variance:                      0.083333  ##   Skewness:                      0  ##   95 percent upper bound:        0.95  ##   Precision:                     NaN plot(prior1)"},{"path":"/articles/v3_prior_distributions.html","id":"prior-distributions-with-classical-properties-method-strict","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Prior distributions with classical properties (method = 'strict')","title":"Planning: Prior distributions","text":"can construct prior distribution basis existing information using method = 'strict'. prior distribution constructed improper yields exactly results classical methodology respect sample sizes, upper limits, evidence. can visually inspect prior distribution using plot() function.","code":"prior2 <- auditPrior(method = 'strict', likelihood = likelihood) summary(prior2) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     classical properties  ##  ## Results: ##   Functional form:               beta(α = 1, β = 0)  ##   Equivalent sample size:        0  ##   Equivalent errors:             0  ##   Mode:                          0  ##   Mean:                          1  ##   Median:                        1  ##   Variance:                      0  ##   Skewness:                      -Inf  ##   95 percent upper bound:        1  ##   Precision:                     1 plot(prior2)"},{"path":"/articles/v3_prior_distributions.html","id":"custom-prior-distributions-method-param","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Custom prior distributions (method = 'param')","title":"Planning: Prior distributions","text":"can manually specify \\(\\alpha\\) \\(\\beta\\) parameters prior distribution using method = 'param' combination alpha beta arguments. example, code creates beta(2, 10) prior distribution. can visually inspect prior distribution using plot() function.","code":"prior3 <- auditPrior(method = 'param', likelihood = likelihood, alpha = 2, beta = 10) summary(prior3) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     α = 2; β = 10  ##  ## Results: ##   Functional form:               beta(α = 2, β = 10)  ##   Equivalent sample size:        11  ##   Equivalent errors:             1  ##   Mode:                          0.1  ##   Mean:                          0.16667  ##   Median:                        0.14796  ##   Variance:                      0.010684  ##   Skewness:                      0.9214  ##   95 percent upper bound:        0.36436  ##   Precision:                     0.26436 plot(prior3)"},{"path":"/articles/v3_prior_distributions.html","id":"prior-distributions-with-equal-prior-probabilities-method-impartial","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Prior distributions with equal prior probabilities (method = 'impartial')","title":"Planning: Prior distributions","text":"can incorporate assumption tolerable misstatement equally likely intolerable misstatement using method = 'impartial'. example, code incorporates assumption prior distribution. Note: method requires specify value materiality. can visually inspect prior distribution using plot() function.","code":"prior4 <- auditPrior(method = 'impartial', likelihood = likelihood, expected = expected, conf.level = confidence,                       materiality = materiality) summary(prior4) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     p(Θ < 0.05) = p(Θ > 0.05) = 0.5  ##  ## Results: ##   Functional form:               beta(α = 1.155, β = 16.385)  ##   Equivalent sample size:        16.54  ##   Equivalent errors:             0.1554  ##   Mode:                          0.01  ##   Mean:                          0.065872  ##   Median:                        0.049999  ##   Variance:                      0.0033189  ##   Skewness:                      1.5426  ##   95 percent upper bound:        0.18118  ##   Precision:                     0.17118 plot(prior4)"},{"path":"/articles/v3_prior_distributions.html","id":"prior-distributions-with-custom-prior-probabilities-method-hyp","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Prior distributions with custom prior probabilities (method = 'hyp')","title":"Planning: Prior distributions","text":"can manually assign prior probabilities hypothesis tolerable misstatement hypotheses intolerable misstatement (using p.hmin) combination method = 'hyp'. example, code incorporates information hypothesis tolerable misstatement probability 60% prior distribution. Note: method requires specify value materiality. can visually inspect prior distribution using plot() function.","code":"prior5 <- auditPrior(method = 'hyp', likelihood = likelihood, expected = expected, conf.level = confidence,                      materiality = materiality, p.hmin = 0.6) summary(prior5) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     p(Θ < 0.05) = 0.6; p(Θ > 0.05) = 0.4  ##  ## Results: ##   Functional form:               beta(α = 1.217, β = 22.493)  ##   Equivalent sample size:        22.71  ##   Equivalent errors:             0.2171  ##   Mode:                          0.01  ##   Mean:                          0.051333  ##   Median:                        0.039239  ##   Variance:                      0.0019708  ##   Skewness:                      1.5724  ##   95 percent upper bound:        0.13983  ##   Precision:                     0.12983 plot(prior5)"},{"path":"/articles/v3_prior_distributions.html","id":"prior-distributions-using-the-audit-risk-model-method-arm","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Prior distributions using the Audit Risk Model (method = 'arm')","title":"Planning: Prior distributions","text":"can translate risk assessments Audit Risk Model (inherent risk internal control risk) prior distribution using method = 'arm' combination ir cr arguments. example, code incorporates information inherent risk equal 90% internal control risk equal 60% prior distribution. can visually inspect prior distribution using plot() function.","code":"prior6 <- auditPrior(method = 'arm', likelihood = likelihood, expected = expected, conf.level = confidence,                      materiality = materiality, ir = 0.9, cr = 0.6) summary(prior6) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     ir = 0.9; cr = 0.6; dr = 0.0925926  ##  ## Results: ##   Functional form:               beta(α = 1.21, β = 20.79)  ##   Equivalent sample size:        21  ##   Equivalent errors:             0.21  ##   Mode:                          0.0105  ##   Mean:                          0.055  ##   Median:                        0.042056  ##   Variance:                      0.0022598  ##   Skewness:                      1.5602  ##   95 percent upper bound:        0.14982  ##   Precision:                     0.13932 plot(prior6)"},{"path":"/articles/v3_prior_distributions.html","id":"prior-distributions-using-the-bayesian-risk-assessment-model-method-bram","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Prior distributions using the Bayesian Risk Assessment Model (method = 'bram')","title":"Planning: Prior distributions","text":"can incorporate information expected errors (mode) upper confidence bound prior distribution according Bayesian Risk Assessment Model (BRAM) using method = 'bram'. example, code incorporates information mode prior distribution 1% upper bound 60%. can visually inspect prior distribution using plot() function.","code":"prior7 <- auditPrior(method = 'bram', likelihood = likelihood, expected = expected, conf.level = confidence,                       materiality = materiality, ub = 0.6) summary(prior7) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     mode = 0.01; upper bound = 0.6  ##  ## Results: ##   Functional form:               beta(α = 1.023, β = 3.317)  ##   Equivalent sample size:        3.34  ##   Equivalent errors:             0.0234  ##   Mode:                          0.01  ##   Mean:                          0.23581  ##   Median:                        0.19356  ##   Variance:                      0.033746  ##   Skewness:                      0.90737  ##   95 percent upper bound:        0.5991  ##   Precision:                     0.5891 plot(prior7)"},{"path":"/articles/v3_prior_distributions.html","id":"prior-distributions-from-an-earlier-sample-method-sample","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Prior distributions from an earlier sample (method = 'sample')","title":"Planning: Prior distributions","text":"can incorporate information earlier sample prior distribution using method = 'sample' combination x n. example, code incorporates information earlier sample 30 items 0 misstatements found prior distribution. can visually inspect prior distribution using plot() function.","code":"prior8 <- auditPrior(method = 'sample', likelihood = likelihood, expected = expected, conf.level = confidence,                      materiality = materiality, x = 0, n = 30) summary(prior8) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     earlier sample of 30 items with 0 errors  ##  ## Results: ##   Functional form:               beta(α = 1, β = 30)  ##   Equivalent sample size:        30  ##   Equivalent errors:             0  ##   Mode:                          0  ##   Mean:                          0.032258  ##   Median:                        0.02284  ##   Variance:                      0.0009755  ##   Skewness:                      1.8152  ##   95 percent upper bound:        0.095034  ##   Precision:                     0.095034 plot(prior8)"},{"path":"/articles/v3_prior_distributions.html","id":"prior-distributions-from-a-weighted-earlier-sample-method-factor","dir":"Articles","previous_headings":"Constructing a prior distribution","what":"Prior distributions from a weighted earlier sample (method = 'factor')","title":"Planning: Prior distributions","text":"can incorporate information last years results, weighted factor, prior distribution using method = 'factor' combination x n. example, code incorporates information last years results (sample 58 items 0 misstatements found), weighted factor 0.7, prior distribution. can visually inspect prior distribution using plot() function.","code":"prior9 <- auditPrior(method = 'factor', likelihood = likelihood, expected = expected, conf.level = confidence,                      materiality = materiality, x = 0, n = 58, factor = 0.7) summary(prior9) ##  ##  Prior Distribution Summary ##  ## Options: ##   Likelihood:                    binomial  ##   Specifics:                     earlier sample of 58 items with 0 errors weighted by 0.7  ##  ## Results: ##   Functional form:               beta(α = 1, β = 40.6)  ##   Equivalent sample size:        40.6  ##   Equivalent errors:             0  ##   Mode:                          0  ##   Mean:                          0.024039  ##   Median:                        0.016928  ##   Variance:                      0.0005507  ##   Skewness:                      1.8607  ##   95 percent upper bound:        0.07113  ##   Precision:                     0.07113 plot(prior9)"},{"path":"/articles/v3_prior_distributions.html","id":"using-a-prior-distribution-in-other-functions","dir":"Articles","previous_headings":"","what":"Using a prior distribution in other functions","title":"Planning: Prior distributions","text":"Bayesian statistics allows auditor build existing information. Therefore, objects returned auditPrior() function can used input prior argument planning() evaluation() functions.","code":""},{"path":"/articles/v3_prior_distributions.html","id":"combining-auditprior-with-planning","dir":"Articles","previous_headings":"Using a prior distribution in other functions","what":"Combining auditPrior() with planning()","title":"Planning: Prior distributions","text":"prior distribution can used planning stage calculate minimum sample size providing objected returned auditPrior() function planning() function. example, code calculates minimum sample size test misstatement population performance materiality 5%, incorporating information prior9.","code":"jfa::planning(materiality = materiality, expected = expected, conf.level = confidence, prior = prior9) ## Warning in jfa::planning(materiality = materiality, expected = expected, : using ## 'likelihood = binomial' from 'prior' ##  ##  Bayesian Audit Sample Planning ##  ## minimum sample size = 29  ## sample size obtained in 30 iteration(s) via method 'binomial' + 'prior'"},{"path":"/articles/v3_prior_distributions.html","id":"combining-auditprior-with-evaluation","dir":"Articles","previous_headings":"Using a prior distribution in other functions","what":"Combining auditPrior() with evaluation()","title":"Planning: Prior distributions","text":"prior distribution can used evaluation stage providing objected returned auditPrior() function evaluation() function. example, code evaluates misstatement population respect performance materiality 5% seeing sample 60 items 1 misstatement, incorporating information prior8.","code":"jfa::evaluation(materiality = materiality, conf.level = confidence, x = 1, n = 60, prior = prior9) ## Warning in jfa::evaluation(materiality = materiality, conf.level = confidence, : ## using 'method = binomial' from 'prior' ##  ##  Bayesian Audit Sample Evaluation ##  ## data:  1 and 60 ## number of errors = 1, number of samples = 60, taint = 1, BF₁₀ = 3.7968 ## alternative hypothesis: true misstatement rate is less than 0.05 ## 95 percent credible interval: ##  0.00000000 0.04628728 ## estimate: ##  0.01004016  ## estimates obtained via method 'binomial' + 'prior'"},{"path":"/articles/v3_prior_distributions.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Planning: Prior distributions","text":"Derks, K., de Swart, J., Wagenmakers, E.-J., Wetzels, R. (2021). default Bayesian hypothesis test audit sampling. Working paper. Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636.","code":""},{"path":"/articles/v4_selection_methodology.html","id":"sampling-methodology","dir":"Articles","previous_headings":"","what":"Sampling methodology","title":"Selection: Sampling methodology","text":"Auditors often required assess balances processes involve large number items. Since inspect items individually, need select subset (.e., sample) total population make statement certain characteristic population. purpose, various selection methodologies available become standard audit context. However, practice seems distinction sampling methods —use — always easy make. vignette outlines commonly used sampling methodology auditing shows select sample using methods jfa package.","code":""},{"path":"/articles/v4_selection_methodology.html","id":"sampling-units","dir":"Articles","previous_headings":"Sampling methodology","what":"Sampling units","title":"Selection: Sampling methodology","text":"Selecting subset population requires knowledge sampling units; physical representations population needs audited. Generally, auditor choose two types sampling units: individual items population individual monetary units population. order perform statistical selection, population must divided individual sampling units can assigned probability included sample. total collection sampling units assigned selection probability called sampling frame.","code":""},{"path":"/articles/v4_selection_methodology.html","id":"items","dir":"Articles","previous_headings":"Sampling methodology > Sampling units","what":"Items","title":"Selection: Sampling methodology","text":"sampling unit record (.e., attributes) sampling generally characteristic item population. example, suppose inspect population receipts. possible sampling unit record sampling can date payment receipt. sampling unit (e.g., date payment) selected sampling method, population item corresponds sampled unit included sample.","code":""},{"path":"/articles/v4_selection_methodology.html","id":"monetary-units","dir":"Articles","previous_headings":"Sampling methodology > Sampling units","what":"Monetary units","title":"Selection: Sampling methodology","text":"sampling unit monetary unit sampling different sampling unit record sampling individual monetary unit within item transaction, like individual dollar. example, single sampling unit can 10\\(^{th}\\) dollar specific receipt population. sampling unit (e.g., individual dollar) selected sampling method, population item includes sampling unit included sample.","code":""},{"path":"/articles/v4_selection_methodology.html","id":"sampling-methods","dir":"Articles","previous_headings":"Sampling methodology","what":"Sampling methods","title":"Selection: Sampling methodology","text":"section discusses four sampling methods implemented jfa. First, notation, let population \\(N\\) defined total set individual sampling units \\(x_i\\). \\[N = \\{x_1, x_2, \\dots, x_N\\}.\\] statistical sampling, every sampling unit \\(x_i\\) population must receive selection probability \\(p(x_i)\\). purpose sampling method provide framework assign selection probabilities sampling units, subsequently draw sampling units population set size \\(n\\) created. next section discusses sampling methods available jfa. illustrate outcomes different sampling methods, use BuildIt data set can loaded using code .","code":"data(BuildIt)"},{"path":"/articles/v4_selection_methodology.html","id":"fixed-interval-sampling-systematic-sampling","dir":"Articles","previous_headings":"Sampling methodology > Sampling methods","what":"Fixed interval sampling (Systematic sampling)","title":"Selection: Sampling methodology","text":"Fixed interval sampling method designed yielding representative samples monetary populations. algorithm determines uniform interval (optionally ranked) sampling units. Next, starting point handpicked randomly selected first interval sampling unit selected throughout population uniform intervals starting point. example, interval width 10 sampling units sampling unit number 5 chosen starting point, sampling units 5, 15, 25, etc. selected included sample. number required intervals \\(\\) can determined dividing number sampling units population required sample size: \\[= \\frac{N}{n},\\] \\(n\\) required sample size \\(N\\) total number sampling units population. space selected sampling units equal, selection probability sampling unit theoretically defined : \\[p(x) = \\frac{1}{},\\] property space selected units \\(\\) interval \\(\\), see Figure 1. However, practice selection deterministic completely depends chosen starting points (using start). Figure 1: Illustration fixed interval sampling fixed interval method yields sample allows every sampling unit population equal chance selected. However, fixed interval method property items population monetary value larger interval \\(\\) selection probability one one items’ sampling units always selected interval. Note , population arranged randomly respect deviation pattern, fixed interval sampling equivalent random selection. Advantage(s): advantage fixed interval sampling method often simple understand fast perform. Another advantage , monetary unit sampling, items greater calculated interval included sample. record sampling, since units can ranked basis value, also guarantee large items sample. Disadvantage(s): pattern population can coincide selected interval, rendering sample less representative. sometimes seen added complication method sample hard extend drawing initial sample. due chance selecting sampling unit. However, removing already selected sampling units population redrawing intervals problem can efficiently solved. example, code shows apply fixed interval sampling method record sampling monetary unit sampling setting. Note , default, first sampling unit interval selected. However, can changed setting argument start = 1 different value.","code":"# Record sampling sample <- selection(data = BuildIt, size = 100, units = 'items', method = 'interval', start = 1) head(sample$sample, n = 6) ##   row times    ID bookValue auditValue ## 1   1     1 82884    242.61     242.61 ## 2  36     1 80125    118.58     118.58 ## 3  71     1 27566    481.44     481.44 ## 4 106     1 88261    266.66     266.66 ## 5 141     1 58999    568.60     568.60 ## 6 176     1 27801    314.65     314.65 # Monetary unit sampling sample <- selection(data = BuildIt, size = 100, units = 'values', method = 'interval', values = 'bookValue', start = 1) head(sample$sample, n = 6) ##   row times    ID bookValue auditValue ## 1   1     1 82884    242.61     242.61 ## 2  38     1 57172    329.30     329.30 ## 3  73     1 90160    205.69     205.69 ## 4 110     1  4756    295.96     295.96 ## 5 146     1 90183    333.28     333.28 ## 6 183     1 96080    449.07     449.07"},{"path":"/articles/v4_selection_methodology.html","id":"cell-sampling","dir":"Articles","previous_headings":"Sampling methodology > Sampling methods","what":"Cell sampling","title":"Selection: Sampling methodology","text":"cell sampling method divides (optionally ranked) population set intervals \\(\\) computed previously given equations. Within interval, sampling unit selected randomly drawing number 1 interval range \\(\\). causes space \\(\\) sampling units vary. Like fixed interval sampling method, selection probability sampling unit defined : \\[p(x) = \\frac{1}{}.\\] Figure 2: Illustration cell sampling cell sampling method property items population monetary value larger twice interval \\(\\) selection probability one. Advantage(s): sets samples possible fixed interval sampling, systematic interval \\(\\) determine selections. argued cell sampling algorithm offers solution pattern problem fixed interval sampling. Disadvantage(s): disadvantage sampling method items population monetary value larger interval selection probability one. Besides, population items can two adjacent cells, thereby creating possibility items included sample twice. example, code shows apply cell sampling method record sampling monetary unit sampling setting. important set seed make results reproducible.","code":"# Record sampling set.seed(1) sample <- selection(data = BuildIt, size = 100, units = 'items', method = 'cell') head(sample$sample, n = 6) ##   row times    ID bookValue auditValue ## 1   9     1 14608    216.48     216.48 ## 2  48     1 45437    347.94     139.18 ## 3  90     1 90333    241.17     241.17 ## 4 136     1 45746    440.72     440.72 ## 5 147     1 72906    677.62     677.62 ## 6 206     1 93529    528.79     528.79 # Monetary unit sampling set.seed(1) sample <- selection(data = BuildIt, size = 100, units = 'values', method = 'cell', values = 'bookValue') head(sample$sample, n = 6) ##   row times    ID bookValue auditValue ## 1   8     1 81460    295.20     295.20 ## 2  53     1 80645    677.88     677.88 ## 3  92     1 75133    355.16     355.16 ## 4 142     1 68676    612.46     612.46 ## 5 153     1 63777    552.83     552.83 ## 6 214     1 25379   1021.07    1021.07"},{"path":"/articles/v4_selection_methodology.html","id":"random-sampling","dir":"Articles","previous_headings":"Sampling methodology > Sampling methods","what":"Random sampling","title":"Selection: Sampling methodology","text":"Random sampling simple straight-forward selection method random sampling method provides method allows every sampling unit population equal chance selected, meaning every combination sampling units probability selected every combination number sampling units. Simply put, algorithm draws random selection size \\(n\\) sampling units. Therefore, selection probability sampling unit defined : \\[p(x) = \\frac{1}{N},\\] \\(N\\) number units population. clarify procedure, Figure 3 provides illustration random sampling method. Figure 3: Illustration random sampling Advantage(s): random sampling method yields optimal random selection, additional advantage sample can easily extended applying method . Disadvantages: selection probabilities equal sampling units guarantee items large monetary value population included sample. example, code shows apply random sampling (without replacement using replace) method record sampling monetary unit sampling setting. important set seed make results reproducible.","code":"# Record sampling set.seed(1) sample <- selection(data = BuildIt, size = 100, units = 'items', method = 'random') head(sample$sample, n = 6) ##    row times    ID bookValue auditValue ## 1 1017     1 50755    618.24     618.24 ## 2  679     1 20237    669.75     669.75 ## 3 2177     1  9517    454.02     454.02 ## 4  930     1 85674    257.82     257.82 ## 5 1533     1 31051    308.53     308.53 ## 6  471     1 84375    824.66     824.66 # Monetary unit sampling set.seed(1) sample <- selection(data = BuildIt, size = 100, units = 'values', method = 'random', values = 'bookValue') head(sample$sample, n = 6) ##    row times    ID bookValue auditValue ## 1 2174     1 90260    625.98     625.98 ## 2 2928     1 68595    548.21     548.21 ## 3 1627     1 98301    429.07     429.07 ## 4  700     1 29683    239.26     239.26 ## 5  147     1 72906    677.62     677.62 ## 6 3056     1 86317    246.22     246.22"},{"path":"/articles/v4_selection_methodology.html","id":"modified-sieve-sampling","dir":"Articles","previous_headings":"Sampling methodology > Sampling methods","what":"Modified Sieve Sampling","title":"Selection: Sampling methodology","text":"fourth option sampling method modified sieve sampling (Hoogduin, Hall, & Tsay, 2010). algorithm starts selecting standard uniform random number \\(R_i\\) 0 1 item population. Next, sieve ratio: \\[S_i = \\frac{Y_i}{R_i}\\] computed item dividing book value item random number. Lastly, items population sorted sieve ratio \\(S\\) (decreasing order) top \\(n\\) items selected inspection. contrast classical sieve sampling method (Rietveld, 1978), modified sieve sampling method provides precise control sample sizes. example, code shows apply modified sieve sampling method monetary unit sampling setting. important set seed make results reproducible.","code":"# Monetary unit sampling set.seed(1) sample <- selection(data = BuildIt, size = 100, units = 'values', method = 'sieve', values = 'bookValue') head(sample$sample, n = 6) ##    row times    ID bookValue auditValue ## 1 2329     1 29919    681.10     681.10 ## 2 2883     1 59402    279.29     279.29 ## 3 1949     1 56012    581.22     581.22 ## 4 3065     1 47482    621.73     621.73 ## 5 1072     1 79901    789.97     789.97 ## 6  488     1 50811    651.35     651.35"},{"path":"/articles/v4_selection_methodology.html","id":"ordering-or-randomizing-the-population","dir":"Articles","previous_headings":"Sampling methodology","what":"Ordering or randomizing the population","title":"Selection: Sampling methodology","text":"selection() function additional arguments (order, decreasing, randomize) preprocess population selection. order argument takes input column name data determines order population. example, can order population lowest book value highest book value engaging selection. case, use decreasing = FALSE argument. randomize argument can used randomly shuffle items population selection.","code":"# Ordering population from lowest 'bookValue' to highest 'bookValue' before MUS set.seed(1) sample <- selection(data = BuildIt, size = 100, units = 'values', values = 'bookValue', order = 'bookValue', decreasing = FALSE) head(sample$sample, n = 6) ##    row times    ID bookValue auditValue ## 1 2662     1 30568     14.47      14.47 ## 2 2923     1 63567    125.21     125.21 ## 3 2542     1 95807    153.56     153.56 ## 4  101     1 64282    172.65     172.65 ## 5  838     1 43352    188.72     188.72 ## 6  302     1 94296    198.59     198.59 # Randomly shuffle population items before MUS set.seed(1) sample <- selection(data = BuildIt, size = 100, units = 'values', values = 'bookValue', randomize = TRUE) head(sample$sample, n = 6) ##    row times    ID bookValue auditValue ## 1 1017     1 50755    618.24     618.24 ## 2 2159     1  3653    492.39     492.39 ## 3 1639     1 39570    307.54     307.54 ## 4 2698     1   225    507.18     507.18 ## 5  355     1 27934    749.38     749.38 ## 6 1242     1 64071    759.34     759.34"},{"path":"/articles/v4_selection_methodology.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Selection: Sampling methodology","text":"Hoogduin, L. ., Hall, T. W., & Tsay, J. J. (2010). Modified sieve sampling: method single-multi-stage probability-proportional--size sampling. Auditing: Journal Practice & Theory, 29(1), 125-148. Leslie, D. ., Teitlebaum, . D., & Anderson, R. J. (1979). Dollar-unit Sampling: Practical Guide Auditors. London: Pitman.","code":""},{"path":"/articles/v5_estimating_misstatement.html","id":"estimation","dir":"Articles","previous_headings":"","what":"Estimation","title":"Evaluation: Estimating misstatement","text":"performing estimation auditor tries determine unknown misstatement population basis sample. Generally, estimation implies minimal amount assurance obtained precision / accuracy estimate (.e., likely error - upper bound). inference population misstatement can performed using evaluation() function specifying min.precision argument providing sample data summary statistics.","code":""},{"path":"/articles/v5_estimating_misstatement.html","id":"classical-estimation","dir":"Articles","previous_headings":"Estimation","what":"Classical estimation","title":"Evaluation: Estimating misstatement","text":"Suppose sampling objective estimate misstatement precision 2%. planned sample n = 188 items x = 1 turns contain error. Standard classical evaluation using Poisson distribution can performed using example code . Calling summary() function result evaluation() function provides estimates likely error, 95% upper bound, precision. can see, likely error population 1 / 188 = 0.53% 95% (one-sided) confidence interval ranges 0% 2.52%. Consequently, precision estimate 2.52% - 0.53% = 1.99%. means sample provides sufficient information estimate misstatement population precision 2%.","code":"result_classical <- evaluation(min.precision = 0.02, method = \"poisson\", n = 188, x = 1) summary(result_classical) ##  ##  Classical Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    1  ##   Min. precision:                 0.02  ##   Method:                         poisson  ##  ## Data: ##   Sample size:                    188  ##   Number of errors:               1  ##   Sum of taints:                  1  ##  ## Results: ##   Most likely error:              0.0053191  ##   95 percent confidence interval: [0, 0.025233]  ##   Precision:                      0.019914"},{"path":"/articles/v5_estimating_misstatement.html","id":"bayesian-estimation","dir":"Articles","previous_headings":"Estimation","what":"Bayesian estimation","title":"Evaluation: Estimating misstatement","text":"principle Bayesian estimation follows procedure classical counterpart, exception prior distribution must provided evaluation() function. Therefore, first step set prior distribution (see also vignette Prior distributions). illustration, assume default gamma(1, 1) prior distribution. sample outcomes together prior distribution can provided evaluation function. , summary() function provides estimates likely error, 95% upper bound, precision. Note , prior already constructed use poisson likelihood, method argument need provided evaluation() function. can see, posterior distribution gamma(2, 189) distribution. distribution implies likely error population 0.53% 95% (one-sided) confidence interval ranges 0% 2.51%. Consequently, precision estimate 2.51% - 0.53% = 1.98%. Also Bayesian framework, sample provides sufficient information estimate misstatement population precision 2%.","code":"prior <- auditPrior(method = \"default\", likelihood = \"poisson\") result_bayesian <- evaluation(min.precision = 0.02, n = 188, x = 1, prior = prior) summary(result_bayesian) ##  ##  Bayesian Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    1  ##   Min. precision:                 0.02  ##   Method:                         poisson  ##   Prior distribution:             gamma(α = 1, β = 1)  ##  ## Data: ##   Sample size:                    188  ##   Number of errors:               1  ##   Sum of taints:                  1  ##  ## Results: ##   Posterior distribution:         gamma(α = 2, β = 189)  ##   Most likely error:              0.005291  ##   95 percent credible interval:   [0, 0.0251]  ##   Precision:                      0.019809"},{"path":"/articles/v5_estimating_misstatement.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Evaluation: Estimating misstatement","text":"Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636. Stewart, T. R. (2012). Technical Notes AICPA Audit Guide Audit Sampling. American Institute Certified Public Accountants, New York. Stewart, T. R. (2013). Bayesian Audit Assurance Model Application Component Materiality problem Group Audits. VU University, Amsterdam.","code":""},{"path":"/articles/v6_testing_misstatement.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"","what":"Hypothesis testing","title":"Evaluation: Testing misstatement","text":"audit sampling test auditor generally assigns performance materiality, \\(\\theta_{max}\\), population expresses maximum tolerable misstatement (fraction monetary amount). auditor inspects sample population make decision following two hypotheses: \\[H_1:\\theta<\\theta_{max}\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\,\\, H_0:\\theta\\geq\\theta_{max}\\]. evaluation() function allows make statement credibility two hypotheses inspecting sample. Note requires specify materiality argument function.","code":""},{"path":"/articles/v6_testing_misstatement.html","id":"classical-hypothesis-testing-using-the-p-value","dir":"Articles","previous_headings":"","what":"Classical hypothesis testing using the p-value","title":"Evaluation: Testing misstatement","text":"Classical hypothesis testing uses p value make decision whether reject hypothesis \\(H_0\\) . example, consider auditor wants verify whether population contains less 5 percent misstatement, implying hypotheses \\(H_1:\\theta<0.05\\) \\(H_0:\\theta\\geq0.05\\). taken sample 100 items, 1 contained error. set significance level p value 0.05, implying p value < 0.05 enough reject hypothesis \\(H_0\\). can see, p value lower 0.05 implying hypothesis \\(H_0\\) rejected.","code":"result_classical <- evaluation(materiality = 0.05, x = 1, n = 100) summary(result_classical) ##  ##  Classical Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    0.05  ##   Materiality:                    0.05  ##   Hypotheses:                     H₀: Θ >= 0.05 vs. H₁: Θ < 0.05  ##   Method:                         poisson  ##  ## Data: ##   Sample size:                    100  ##   Number of errors:               1  ##   Sum of taints:                  1  ##  ## Results: ##   Most likely error:              0.01  ##   95 percent confidence interval: [0, 0.047439]  ##   Precision:                      0.037439  ##   p-value:                        0.040428"},{"path":"/articles/v6_testing_misstatement.html","id":"bayesian-hypothesis-testing-using-the-bayes-factor","dir":"Articles","previous_headings":"","what":"Bayesian hypothesis testing using the Bayes factor","title":"Evaluation: Testing misstatement","text":"Bayesian hypothesis testing uses Bayes factor, \\(BF_{10}\\) \\(BF_{01}\\), make statement evidence provided sample support one two hypotheses \\(H_1\\) \\(H_0\\). subscript Bayes factor denotes hypothesis favors. default, evaluation() function returns value \\(BF_{10}\\). example interpret Bayes factor, value \\(BF_{10} = 10\\) (provided evaluation() function) can interpreted : data 10 times likely occurred hypothesis \\(H_1:\\theta<\\theta_{max}\\) hypothesis \\(H_0:\\theta\\geq\\theta_{max}\\). \\(BF_{10} > 1\\) indicates evidence \\(H_1\\), \\(BF_{10} < 1\\) indicates evidence \\(H_0\\).","code":""},{"path":"/articles/v6_testing_misstatement.html","id":"example","dir":"Articles","previous_headings":"Bayesian hypothesis testing using the Bayes factor","what":"Example","title":"Evaluation: Testing misstatement","text":", consider example auditor wants verify whether population contains less 5 percent misstatement, implying hypotheses \\(H_1:\\theta<0.05\\) \\(H_0:\\theta\\geq0.05\\). taken sample 100 items, 1 contained error. prior distribution assumed default beta(1,1) prior. output shows \\(BF_{10}=515\\), implying extreme evidence \\(H_1\\), hypothesis population contains misstatements lower 5 percent population.","code":"prior <- auditPrior(materiality = 0.05, method = \"default\", likelihood = \"binomial\") result_bayesian <- evaluation(materiality = 0.05, x = 1, n = 100, prior = prior) ## Warning in evaluation(materiality = 0.05, x = 1, n = 100, prior = prior): using ## 'method = binomial' from 'prior' summary(result_bayesian) ##  ##  Bayesian Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    0.05  ##   Materiality:                    0.05  ##   Hypotheses:                     H₀: Θ > 0.05 vs. H₁: Θ < 0.05  ##   Method:                         binomial  ##   Prior distribution:             beta(α = 1, β = 1)  ##  ## Data: ##   Sample size:                    100  ##   Number of errors:               1  ##   Sum of taints:                  1  ##  ## Results: ##   Posterior distribution:         beta(α = 2, β = 100)  ##   Most likely error:              0.01  ##   95 percent credible interval:   [0, 0.046107]  ##   Precision:                      0.036107  ##   BF₁₀:                            515.86"},{"path":"/articles/v6_testing_misstatement.html","id":"sensitivity-to-the-prior-distribution","dir":"Articles","previous_headings":"Bayesian hypothesis testing using the Bayes factor","what":"Sensitivity to the prior distribution","title":"Evaluation: Testing misstatement","text":"audit sampling, Bayes factor dependent prior distribution \\(\\theta\\). rule thumb, prior distribution uninformative (method = 'default') respect \\(\\theta\\), Bayes factor tends overquantify evidence favor \\(H_1\\). can mitigate dependency using method = \"impartial\" auditPrior() function, constructs prior distribution impartial respect hypotheses \\(H_1\\) \\(H_0\\). output shows \\(BF_{10}=47\\), implying strong evidence \\(H_1\\), hypothesis population contains misstatements lower 5 percent population. Since two priors resulted convincing Bayes factors, results robust choice prior distribution.","code":"prior <- auditPrior(materiality = 0.05, method = \"impartial\", likelihood = \"binomial\") result_bayesian <- evaluation(materiality = 0.05, x = 1, n = 100, prior = prior) ## Warning in evaluation(materiality = 0.05, x = 1, n = 100, prior = prior): using ## 'method = binomial' from 'prior' summary(result_bayesian) ##  ##  Bayesian Audit Sample Evaluation Summary ##  ## Options: ##   Confidence level:               0.95  ##   Materiality:                    0.05  ##   Materiality:                    0.05  ##   Hypotheses:                     H₀: Θ > 0.05 vs. H₁: Θ < 0.05  ##   Method:                         binomial  ##   Prior distribution:             beta(α = 1, β = 13.513)  ##  ## Data: ##   Sample size:                    100  ##   Number of errors:               1  ##   Sum of taints:                  1  ##  ## Results: ##   Posterior distribution:         beta(α = 2, β = 112.513)  ##   Most likely error:              0.0088878  ##   95 percent credible interval:   [0, 0.041108]  ##   Precision:                      0.03222  ##   BF₁₀:                            47.435"},{"path":"/articles/v6_testing_misstatement.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Evaluation: Testing misstatement","text":"Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636. Derks, K., de Swart, J., Wagenmakers, E.-J., & Wetzels, R. (2021). Bayesian Approach Audit Evidence: Quantifying Statistical Evidence using Bayes Factor. PsyArXiv.","code":""},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Evaluation: Bayes factors using summary statistics","text":"vignette illustrates auditor can use jfa evaluate sample outcomes Bayes factor using summary statistics alone. example application context quality control described .","code":""},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"application","dir":"Articles","previous_headings":"","what":"Application","title":"Evaluation: Bayes factors using summary statistics","text":"Two-stage sampling plans required initial sample provide enough assurance accept (reject) population definitively. field quality control, ISO 28596 ‘Sampling procedures inspection attributes — Two-stage sampling plans auditing inspection prior information’ provides two-stage sampling plans attributes inspection proportion nonconforming items target population discrete units. example, standard applies inspections proportion nonconforming items lot product items, inspections proportion nonconforming test characteristics product subject acceptance test.","code":""},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"standard-procedure","dir":"Articles","previous_headings":"Application","what":"Standard procedure","title":"Evaluation: Bayes factors using summary statistics","text":"idea behind standard two-stage sampling plan simple. first stage, drawing \\(n_1\\) items observing \\(k_1\\) nonconforming items, confidence interval proportion nonconforming items calculated. decision first stage proceeds according one three following scenarios: confidence interval completely lies tolerance value, lot accepted. confidence interval completely lies tolerance value, lot rejected. confidence interval contains tolerance value, decision can made first stage. case, auditor proceeds second stage. second stage, number \\(k_2\\) nonconforming items observed sample size \\(n_2\\). new confidence interval proportion nonconforming items calculated based total number \\(k_1 + k_2\\) nonconforming items. decision second stage proceeds according one two following scenarios: confidence interval completely lies tolerance value, decision approval rejection analogous first stage. interval contains tolerance value, decision based whether bigger portion confidence interval lies tolerance value. larger portion interval lies tolerance value, lot rejected. larger portion interval lies tolerance value, lot accepted.","code":""},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"numerical-example","dir":"Articles","previous_headings":"Application","what":"Numerical example","title":"Evaluation: Bayes factors using summary statistics","text":"auditor inspecting lot products wants make statement 90% confidence tolerance value 5%. formulate hypothesis intolerable deviations \\(H_0:\\theta \\geq 0.05\\) hypothesis tolerable deviations \\(H_1: \\theta < 0.05\\). first stage, auditor inspects \\(n_1 = 32\\) items observes \\(k_1 = 2\\) nonconforming items. shortest two-sided confidence interval (Göb & Lurz, 2012) proportion nonconforming items [0.0167; 0.1866]. confidence interval contains tolerance value therefore decision can made first stage. auditor therefore continues second stage. second stage, auditor inspects additional \\(n_2 = 50\\) items observes \\(k_2 = 0\\) nonconforming items. observing data, shortest two-sided confidence interval proportion nonconforming items (using \\(n = n_1 + n_2\\) \\(k = k_1 + k_2\\)) [0.0065; 0.0734]. point, confidence interval still contains tolerance value auditor determines portion confidence interval lies tolerance value larger portion tolerance value. Therefore, accept lot.","code":"confidence <- 0.90 # 90% confidence tolerance  <- 0.05 # 5% tolerance ISO28596:::CI.binom.shortest(size = 32, x = 2, level = confidence)$bounds #      x estimate      lower     upper # [1,] 2   0.0625 0.01674365 0.1866428 ISO28596:::CI.binom.shortest(size = 32 + 50, x = 2 + 0, level = confidence)$bounds #      x   estimate       lower      upper # [1,] 2 0.02439024 0.006504196 0.07341118"},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"bayes-factors","dir":"Articles","previous_headings":"","what":"Bayes factors","title":"Evaluation: Bayes factors using summary statistics","text":"jfa package can used calculate Bayes factors hypothesis tolerable deviations \\(H_1\\) lot versus hypothesis intolerable deviations \\(H_0\\) lot. Bayes factor can provide insight weight evidence favor acceptance lot versus evidence favor rejection lot. Especially situation confidence interval contains tolerance value Bayes factor can provide easy interpretation evidence favor acceptance versus rejection. \\[BF_{10} = \\underbrace{\\frac{p(\\text{data} | H_1)}{p(\\text{data} | H_0)}}_{\\text{Relative evidence}} \\]","code":""},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"prior-distribution","dir":"Articles","previous_headings":"Bayes factors","what":"Prior distribution","title":"Evaluation: Bayes factors using summary statistics","text":"calculate Bayes factor auditor must first specify prior distribution proportion nonconforming items lot. appropriate prior distribution can one assigns equal probability event acceptance event rejection (Derks et al., 2021), see also vignette Prior distributions. code creates prior distribution.","code":"prior <- auditPrior(method = \"impartial\", likelihood = \"binomial\", materiality = 0.05)"},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"bayes-factor-after-stage-1","dir":"Articles","previous_headings":"Bayes factors","what":"Bayes factor after stage 1","title":"Evaluation: Bayes factors using summary statistics","text":"Using evaluation() function auditor can create prior distribution calculate Bayes factor favor acceptance lot versus rejection lot. case, Bayes factor favor acceptance (\\(BF_{-+}\\)) 0.66. Bayes factor represents anecdotal evidence favor rejection lot, since data 1 / 0.66 = 1.51 times likely hypothesis \\(H_0\\) hypothesis \\(H_1\\) (see vignette Testing misstatement interpretation \\(BF_{-+}\\)).","code":"evaluation(materiality = tolerance, x = 2, n = 32, prior = prior) ## Warning in evaluation(materiality = tolerance, x = 2, n = 32, prior = prior): ## using 'method = binomial' from 'prior' ##  ##  Bayesian Audit Sample Evaluation ##  ## data:  2 and 32 ## number of errors = 2, number of samples = 32, taint = 2, BF₁₀ = 0.66487 ## alternative hypothesis: true misstatement rate is less than 0.05 ## 95 percent credible interval: ##  0.0000000 0.1319424 ## estimate: ##  0.04493028  ## estimates obtained via method 'binomial' + 'prior'"},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"bayes-factor-after-stage-2","dir":"Articles","previous_headings":"Bayes factors","what":"Bayes factor after stage 2","title":"Evaluation: Bayes factors using summary statistics","text":"Bayes factor favor acceptance second sample items 6.24 represents moderate evidence favor acceptance. Hence, continue selecting inspecting items gather sufficient evidence one two hypotheses.","code":"evaluation(materiality = tolerance, x = 2 + 0, n = 32 + 50, prior = prior) ## Warning in evaluation(materiality = tolerance, x = 2 + 0, n = 32 + 50, prior = ## prior): using 'method = binomial' from 'prior' ##  ##  Bayesian Audit Sample Evaluation ##  ## data:  2 and 82 ## number of errors = 2, number of samples = 82, taint = 2, BF₁₀ = 6.2413 ## alternative hypothesis: true misstatement rate is less than 0.05 ## 95 percent credible interval: ##  0.00000000 0.06444852 ## estimate: ##  0.02116102  ## estimates obtained via method 'binomial' + 'prior'"},{"path":"/articles/v7_bayes_factors_summary_statistics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Evaluation: Bayes factors using summary statistics","text":"Derks, K., de Swart, J., Wagenmakers, E.-J., Wetzels, R. (2021). default Bayesian hypothesis test audit sampling. Working paper. Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636. Göb R. & Lurz, K. (2014). Shortest two-sided confidence intervals probability prior information. Metrika: International Journal Theoretical Applied Statistics, 77 (3), 389-413.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Koen Derks. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Derks, K. (2022). jfa: Bayesian Classical Audit Sampling. R package version 0.6.3.","code":"@Manual{,   title = {jfa: Bayesian and Classical Audit Sampling},   author = {Koen Derks},   year = {2022},   note = {R package version 0.6.3},   url = {https://CRAN.R-project.org/package=jfa}, }"},{"path":"/index.html","id":"jfa-bayesian-and-classical-audit-sampling-","dir":"","previous_headings":"","what":"jfa - Bayesian and Classical Audit Sampling","title":"jfa - Bayesian and Classical Audit Sampling","text":"jfa R package statistical audit sampling. package provides functions planning, performing, evaluating, reporting audit sample compliant International Standards Auditing. Specifically, functions implement standard audit sampling techniques calculating sample sizes, selecting items population, evaluating misstatement data sample summary statistics. Additionally, jfa package allows user create prior probability distribution perform Bayesian audit sampling using functions. package intended workflow also implemented graphical user interface Audit module JASP, free open-source statistical software program.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"jfa - Bayesian and Classical Audit Sampling","text":"complete documentation jfa, visit package website download package manual. Installation Cheat sheet Intended workflow Benchmarks Statistical tables References Contributing","code":""},{"path":"/index.html","id":"1-installation","dir":"","previous_headings":"","what":"1. Installation","title":"jfa - Bayesian and Classical Audit Sampling","text":"recently released version jfa can downloaded CRAN running following command R: Alternatively, can download development version GitHub using: installation, jfa package can loaded :","code":"install.packages('jfa') devtools::install_github('koenderks/jfa') library(jfa)"},{"path":"/index.html","id":"2-cheat-sheet","dir":"","previous_headings":"","what":"2. Cheat sheet","title":"jfa - Bayesian and Classical Audit Sampling","text":"cheat sheet can help get started jfa package intended workflow. can download pdf version cheat sheet .","code":""},{"path":"/index.html","id":"3-intended-workflow","dir":"","previous_headings":"","what":"3. Intended workflow","title":"jfa - Bayesian and Classical Audit Sampling","text":"can find explanation available functions jfa sorted occurrence standard audit sampling workflow. detailed examples use functions, visit Get started section package website. auditPrior() planning() selection() evaluation() report()","code":""},{"path":"/index.html","id":"create-a-prior-distribution-with-auditprior","dir":"","previous_headings":"3. Intended workflow","what":"Create a prior distribution with auditPrior()","title":"jfa - Bayesian and Classical Audit Sampling","text":"auditPrior() function used specify prior distribution Bayesian audit sampling. interface allows complete customization prior distribution well formal translation pre-existing audit information prior distribution. function returns object class jfaPrior can used associated summary() plot() methods. Objects class jfaPrior can also used input prior argument functions. Moreover, jfaPrior objects corresponding predict() function produce predictions prior distribution data level. Full function default arguments: Supported options method argument: default: Indifferent / noninformative prior distribution. strict: Improper prior distribution (matches classical results). impartial: Impartial prior distribution (Derks et al., 2021). param: Manually set prior parameters. hyp: Manually provide prior probability tolerable misstatement (Derks et al., 2021). arm: Manually provide inherent risk internal control risk (Derks et al., 2021). bram: Manually provide upper bound prior distribution (Touw & Hoogduin, 2011). sample: Manually provide equivalent prior sample (Derks et al., 2021). factor: Manually provide weigh equivalent prior sample (Derks et al., 2021). Supported options likelihood argument: poisson: Poisson likelihood conjugate gamma prior distribution (Stewart, 2013). binomial: Binomial likelihood conjugate beta prior distribution (Steele, 1992). hypergeometric: Hypergeometric likelihood conjugate beta-binomial prior distribution (Dyer & Pierce, 1991). Example usage:","code":"auditPrior(method = 'default', likelihood = c('poisson', 'binomial', 'hypergeometric'),             N.units = NULL, alpha = NULL, beta = NULL, materiality = NULL, expected = 0,             ir = NULL, cr = NULL, ub = NULL, p.hmin = NULL, x = NULL,             n = NULL, factor = NULL, conf.level = 0.95) # Default beta(1, 1) prior distribution x <- auditPrior(method = 'default', likelihood = 'binomial')  # Custom gamma(1, 10) prior distribution  x <- auditPrior(method = 'param', likelihood = 'poisson', alpha = 1, beta = 10)  # Beta prior distribution incorporating inherent risk (70%) and control risk (50%) x <- auditPrior(method = 'arm', likelihood = 'binomial', materiality = 0.05, ir = 0.7, cr = 0.5)  summary(x) # Prints information about the prior distribution predict(x, n = 20, cumulative = TRUE) # Predictions for a sample of n = 20"},{"path":"/index.html","id":"plan-a-sample-with-planning","dir":"","previous_headings":"3. Intended workflow","what":"Plan a sample with planning()","title":"jfa - Bayesian and Classical Audit Sampling","text":"planning() function used calculate minimum sample size audit samples. allows specification statistical requirements sample respect performance materiality precision. function returns object class jfaPlanning can used associated summary() plot() methods. perform Bayesian planning, input prior argument can object class jfaPrior returned auditPrior() function, object class jfaPosterior returned evaluation() function. Full function default arguments: Supported options likelihood argument: poisson: Poisson likelihood (Stewart, 2012). binomial: Binomial likelihood (Stewart, 2012). hypergeometric: Hypergeometric likelihood (Stewart, 2012). Example usage:","code":"planning(materiality = NULL, min.precision = NULL, expected = 0,          likelihood = c('poisson', 'binomial', 'hypergeometric'),           conf.level = 0.95, N.units = NULL, by = 1, max = 5000,           prior = FALSE) # Classical planning using the Poisson likelihood x <- planning(materiality = 0.03, likelihood = 'poisson')  # Bayesian planning using a default beta(1, 1) prior and binomial likelihood x <- planning(materiality = 0.03, likelihood = 'binomial', prior = TRUE)  # Bayesian planning using a custom beta(1, 10) prior and binomial likelihood x <- planning(materiality = 0.03,                prior = auditPrior(method = 'param', likelihood = 'binomial', alpha = 1, beta = 10))  summary(x) # Prints information about the planning"},{"path":"/index.html","id":"select-sample-items-with-selection","dir":"","previous_headings":"3. Intended workflow","what":"Select sample items with selection()","title":"jfa - Bayesian and Classical Audit Sampling","text":"selection() function used perform statistical selection audit samples. offers flexible implementations common audit sampling algorithms attributes sampling monetary unit sampling. function returns object class jfaSelection can used associated summary() plot() methods. input size argument can object class jfaPlanning returned planning() function. Full function default arguments: Supported options units argument: items: Sampling units items (rows) (Leslie, Teitlebaum, & Anderson, 1979). values: Sampling units monetary units (Leslie, Teitlebaum, & Anderson, 1979). Supported options method argument: interval: Select fixed unit interval. cell: Select random unit within interval. random: Select random units without interval. sieve: Select units using modified sieve sampling (Hoogduin, Hall, & Tsay, 2010). Example usage:","code":"selection(data, size, units = c('items', 'values'),           method = c('interval', 'cell', 'random', 'sieve'), values = NULL,           order = NULL, decreasing = FALSE, randomize = FALSE,           replace = FALSE, start = 1) # Selection using random record (attributes) sampling x <- selection(data = BuildIt, size = 100, units = 'items', method = 'random')  # Selection using fixed interval monetary unit sampling (using column 'bookValues' in BuildIt) x <- selection(data = BuildIt, size = 100, units = 'values',                 method = 'interval', values = 'bookValues')  summary(x) # Prints information about the selection"},{"path":"/index.html","id":"evaluate-a-sample-with-evaluation","dir":"","previous_headings":"3. Intended workflow","what":"Evaluate a sample with evaluation()","title":"jfa - Bayesian and Classical Audit Sampling","text":"evaluation() function takes sample summary statistics sample performs evaluation according specified method sampling objectives. function returns object class jfaEvalution can used associated summary() plot() methods. perform Bayesian evaluation, input prior argument can object class jfaPrior returned auditPrior() function, object class jfaPosterior returned evaluation() function. Full function default arguments: Supported options method argument: poisson: Poisson likelihood (Stewart, 2012). binomial: Binomial likelihood (Stewart, 2012). hypergeometric: Hypergeometric likelihood (Stewart, 2012). stringer: Stringer bound (Bickel, 1992). stringer.meikle: Stringer bound Meikle’s correction (Meikle, 1972). stringer.lta: Stringer bound LTA correction (Leslie, Teitlebaum, & Anderson, 1979). stringer.pvz: Modified Stringer bound (Pap & van Zuijlen, 1996). rohrbach: Rohrbach’s augmented variance estimator (Rohrbach, 1993). moment: Modified moment bound (Dworin & Grimlund, 1984). coxsnell: Cox Snell bound (Cox & Snell, 1979). mpu: Mean-per-unit estimator (Touw & Hoogduin, 2011). direct: Direct estimator (Touw & Hoogduin, 2011). difference: Difference estimator (Touw & Hoogduin, 2011). quotient: Quotient (ratio) estimator (Touw & Hoogduin, 2011). regression: Regression estimator (Touw & Hoogduin, 2011). Example usage:","code":"evaluation(materiality = NULL, min.precision = NULL, method = 'poisson',            alternative = c('less', 'two.sided', 'greater'), conf.level = 0.95,             data = NULL, values = NULL, values.audit = NULL, times = NULL,             x = NULL, n = NULL, N.units = NULL, N.items = NULL,             r.delta = 2.7, m.type = 'accounts', cs.a = 1, cs.b = 3, cs.mu = 0.5,             prior = FALSE) # Classical evaluation using the Poisson likelihood (and summary statistics) x <- evaluation(materiality = 0.03, x = 1, n = 100, method = 'poisson')  # Bayesian evaluation using a default minimal information prior (and summary statistics) x <- evaluation(materiality = 0.03, x = 1, n = 100, method = 'poisson', prior = TRUE)  # Bayesian evaluation using a custom beta(1, 10) prior (and summary statistics) x <- evaluation(materiality = 0.03, x = 1, n = 100,                  prior = auditPrior(method = 'param', likelihood = 'binomial', alpha = 1, beta = 10))  summary(x) # Prints information about the evaluation"},{"path":"/index.html","id":"create-a-report-with-report","dir":"","previous_headings":"3. Intended workflow","what":"Create a report with report()","title":"jfa - Bayesian and Classical Audit Sampling","text":"report() function takes object class jfaEvaluation returned evaluation() function automatically creates html pdf report containing analysis results interpretation. Full function default arguments: Example usage: example report, see following link.","code":"report(object, file = 'report.html', format = c('html_document', 'pdf_document')) # Generate an automatic report report(object = x, file = 'myReport.html')"},{"path":"/index.html","id":"4-benchmarks","dir":"","previous_headings":"","what":"4. Benchmarks","title":"jfa - Bayesian and Classical Audit Sampling","text":"validate statistical results, jfa’s automated unit tests regularly verify main output package following benchmarks: Audit Sampling: Audit Guide (Appendix Appendix C) AuditSampler MUS (R package version 0.1.6) Touw, P., Hoogduin, L. (2011). Statistiek voor audit en controlling. Boom uitgevers, Amsterdam. SMASH21 + SMASH21-Bayes","code":""},{"path":"/index.html","id":"5-statistical-tables","dir":"","previous_headings":"","what":"5. Statistical tables","title":"jfa - Bayesian and Classical Audit Sampling","text":"can find several informative tables contain statistical sample sizes, upper limits, one-sided p values, Bayes factors. tables created using planning() evaluation() functions provided package. Sample sizes Sample sizes based Poisson distribution Sample sizes based binomial distribution Sample sizes based hypergeometric distribution Upper limits Upper limits based Poisson distribution Upper limits based binomial distribution Upper limits based hypergeometric distribution One-sided p values One-sided p values based Poisson distribution One-sided p values based binomial distribution One-sided p values based hypergeometric distribution Bayes factors Impartial Bayes factors based gamma distribution Impartial Bayes factors based beta distribution Impartial Bayes factors based beta-binomial distribution","code":""},{"path":"/index.html","id":"6-references","dir":"","previous_headings":"","what":"6. References","title":"jfa - Bayesian and Classical Audit Sampling","text":"Bickel, P. J. (1992). Inference auditing: Stringer bound. International Statistical Review, 60(2), 197–209. - View online Cox, D. R., & Snell, E. J. (1979). sampling estimation rare errors. Biometrika, 66(1), 125-132. - View online Derks, K. (2022). jfa: Bayesian classical audit sampling. R package version 0.6.3. - View online Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., & Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636. - View online Derks, K., de Swart, J., Wagenmakers, E.-J., & Wetzels, R. (2021). Bayesian Approach Audit Evidence: Quantifying Statistical Evidence using Bayes Factor. PsyArXiv - View online Derks, K., de Swart. J., Wagenmakers, E.-J., Wille, J., & Wetzels, R. (2021). JASP Audit: Bayesian Tools Auditing Practice. Journal Open Source Software, 6(68), 2733. - View online Dworin, L. D. Grimlund, R. . (1984). Dollar-unit sampling accounts receivable inventory. Accounting Review, 59(2), 218–241. - View online Dyer, D., & Pierce, R. L. (1993). choice prior distribution hypergeometric sampling. Communications Statistics - Theory Methods, 22(8), 2125-2146. - View online Hoogduin, L. ., Hall, T. W., & Tsay, J. J. (2010). Modified sieve sampling: method single-multi-stage probability-proportional--size sampling. Auditing: Journal Practice & Theory, 29(1), 125-148. - View online International Auditing Assurance Standards Board (IAASB). (2018). Handbook international quality control, auditing review, assurance, related services pronouncements (Vol. ). New York: International Federation Accountants. Meikle, G. R. (1972). Statistical Sampling Audit Context. Canadian Institute Chartered Accountants. Leslie, D. ., Teitlebaum, . D., & Anderson, R. J. (1979). Dollar-unit Sampling: Practical Guide Auditors. London: Pitman. Pap, G., & van Zuijlen, M. C. (1996). asymptotic behaviour Stringer bound. Statistica Neerlandica, 50(3), 367-389. - View online Rietveld, C. (1978). De zeefmethode als selectiemethode voor statistische steekproeven de controlepraktijk (1). Compact: Computer en Accountant, 15, 2–11. Rohrbach, K. J. (1993). Variance augmentation achieve nominal coverage probability sampling audit populations. Auditing: Journal Practice & Theory, 12(2), 79-97. Steele, . (1992). Audit Risk Audit Evidence: Bayesian Approach Statistical Auditing. San Diego: Academic Press. Stewart, T. R. (2012). Technical Notes AICPA Audit Guide Audit Sampling. American Institute Certified Public Accountants, New York. - View online Stewart, T. R. (2013). Bayesian Audit Assurance Model Application Component Materiality problem Group Audits. VU University, Amsterdam. - View online Talens, E. (2005). Statistical Auditing AOQL-method. University Groningen, Groningen. - View online Touw, P., Hoogduin, L. (2011). Statistiek voor Audit en Controlling. Boom uitgevers, Amsterdam. Weiler, H. (1965). use incomplete beta functions prior distributions binomial sampling. Technometrics, 7(3), 335-347. - View online","code":""},{"path":"/index.html","id":"7-contributing","dir":"","previous_headings":"","what":"7. Contributing","title":"jfa - Bayesian and Classical Audit Sampling","text":"jfa open-source project aims useful audit community. help benchmarking extending jfa therefore greatly appreciated. Contributing jfa take much time knowledge, extensive information available Wiki repository. willing contribute improvement package adding benchmark, please check Wiki page contribute benchmark jfa. willing contribute improvement package adding new statistical method, please check Wiki page contribute new method jfa.","code":""},{"path":"/reference/BuildIt.html","id":null,"dir":"Reference","previous_headings":"","what":"BuildIt Construction Financial Statements — BuildIt","title":"BuildIt Construction Financial Statements — BuildIt","text":"Fictional data construction company United States, containing 3500 observations identification numbers, book values, audit values. audit values added illustrative purposes, need assessed auditor execution stage audit.","code":""},{"path":"/reference/BuildIt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BuildIt Construction Financial Statements — BuildIt","text":"","code":"data(BuildIt)"},{"path":"/reference/BuildIt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BuildIt Construction Financial Statements — BuildIt","text":"data frame 3500 rows 3 variables. ID unique record identification number. bookValue book value US dollars ($14.47--$2,224.40). auditValue true value US dollars ($14.47--$2,224.40).","code":""},{"path":"/reference/BuildIt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"BuildIt Construction Financial Statements — BuildIt","text":"Derks, K., de Swart, J., Wagenmakers, E.-J., Wille, J., & Wetzels, R. (2019). JASP audit: Bayesian tools auditing practice.","code":""},{"path":"/reference/BuildIt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BuildIt Construction Financial Statements — BuildIt","text":"","code":"data(BuildIt)"},{"path":"/reference/auditPrior.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior Distributions for Audit Sampling — auditPrior","title":"Prior Distributions for Audit Sampling — auditPrior","text":"auditPrior() used specify prior distribution Bayesian audit sampling. interface allows complete customization prior distribution well formal translation pre-existing audit information prior distribution. auditPrior() returns object class jfaPrior can subsequently used planning() evaluation() functions via prior argument. Objects class jfaPrior can used associated summary() plot() methods. details use function, see package vignette: vignette('jfa', package = 'jfa')","code":""},{"path":"/reference/auditPrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior Distributions for Audit Sampling — auditPrior","text":"","code":"auditPrior(method = 'default', likelihood = c('poisson', 'binomial', 'hypergeometric'),            N.units = NULL, alpha = NULL, beta = NULL, materiality = NULL, expected = 0,            ir = NULL, cr = NULL, ub = NULL, p.hmin = NULL, x = NULL,            n = NULL, factor = NULL, conf.level = 0.95)"},{"path":"/reference/auditPrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior Distributions for Audit Sampling — auditPrior","text":"method character specifying method prior distribution constructed. Possible options default, strict, impartial, param, arm, bram, hyp, sample, factor. See details section information. likelihood character specifying likelihood updating prior distribution. Possible options poisson (default) conjugate gamma prior distribution, binomial conjugate beta prior distribution, hypergeometric conjugate beta-binomial prior distribution. See details section information. N.units numeric value larger 0 specifying total number units population. used hypergeometric likelihood. alpha numeric value specifying \\(\\alpha\\) parameter prior distribution. used method param. beta numeric value specifying \\(\\beta\\) parameter prior distribution. used method param. materiality numeric value 0 1 specifying performance materiality (.e., maximum tolerable misstatement) fraction total number units population. used methods impartial, arm, hyp. expected numeric value 0 1 specifying expected errors sample relative total sample size. used methods impartial, arm, bram, hyp. ir numeric value 0 1 specifying inherent risk audit risk model. used method arm. cr numeric value 0 1 specifying internal control risk audit risk model. used method arm. ub numeric value 0 1 specifying conf.level-% upper bound prior distribution fraction total number units population. used method bram. p.hmin numeric value 0 1 specifying prior probability hypothesis tolerable misstatement (H1: \\(\\theta <\\) materiality). used method hyp. x numeric value larger , equal , 0 specifying sum proportional errors (taints) prior sample. used methods sample factor. n numeric value larger 0 specifying sample size prior sample. used methods sample factor. factor numeric value 0 1 specifying weight prior sample. used method factor. conf.level numeric value 0 1 specifying confidence level.","code":""},{"path":"/reference/auditPrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior Distributions for Audit Sampling — auditPrior","text":"object class jfaPrior containing: prior string describing functional form prior distribution. description list containing description prior distribution, including parameters prior distribution implicit sample prior distribution based. statistics list containing statistics prior distribution, including mean, mode, median, upper bound prior distribution. specifics list containing specifics prior distribution vary depending method. hypotheses materiality specified, list containing information hypotheses, including prior probabilities odds hypothesis tolerable misstatement (H1) hypothesis intolerable misstatement (H0). method character indicating method prior distribution constructed. likelihood character indicating likelihood data. materiality materiality specified, numeric value 0 1 giving materiality used construct prior distribution. expected numeric value larger , equal , 0 giving input number expected errors. conf.level numeric value 0 1 giving confidence level. N.units N.units specified, number units population.","code":""},{"path":"/reference/auditPrior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prior Distributions for Audit Sampling — auditPrior","text":"perform Bayesian audit sampling must assign prior probability distribution parameter model, .e., population misstatement \\(\\theta\\).          prior distribution can incorporate pre-existing audit information \\(\\theta\\) seeing sample, consequently allows efficient accurate estimate \\(\\theta\\).          However, default priors used jfa purposely indifferent towards individual values \\(\\theta\\) order 'let data speak '.          Note default priors conservative choice prior since assume possible misstatement (roughly) equally likely seeing data sample.          therefore strongly recommended construct informed prior distribution based pre-existing audit information possible. section elaborates available options method argument. default:   method produces gamma(1, 1), beta(1, 1), beta-binomial(N, 1, 1) prior distribution. priors indifferent towards possible values misstatement. strict:    method produces improper gamma(1, 0), beta(1, 0), beta-binomial(N, 1, 0) prior distribution. prior distributions exactly match sample sizes upper limits classical methods. impartial: method produces impartial prior distribution. prior distributions assume tolerable misstatement (\\(\\theta <\\) materiality) intolerable misstatement (\\(\\theta >\\) materiality) equally likely. param:     method produces gamma(alpha, beta), beta(alpha, beta), beta-binomial(N, alpha, beta) prior distribution. hyp:       method translates assessment prior probability tolerable misstatement (\\(\\theta <\\) materiality) prior distribution. arm:       method translates assessment inherent risk internal control risk (Audit Risk Model, Derks et al., 2021) prior distribution. bram:      method translates assessment expected likely error x-% upper bound prior distribution. sample:    method translates sampling results earlier sample prior distribution. factor:    method translates weighs sampling results earlier sample prior distribution. section elaborates available likelihoods corresponding prior distributions likelihood argument. poisson:        Poisson distribution approximation binomial distribution. Poisson distribution defined : $$f(\\theta, n) = \\frac{\\lambda^\\theta e^{-\\lambda}}{\\theta!}$$ conjugate gamma(\\(\\alpha, \\beta\\)) prior probability density function: $$p(\\theta; \\alpha, \\beta) = \\frac{\\beta^\\alpha \\theta^{\\alpha - 1} e^{-\\beta \\theta}}{\\Gamma(\\alpha)}$$ binomial:       binomial distribution approximation hypergeometric distribution. binomial distribution defined : $$f(\\theta, n, x) = {n \\choose x} \\theta^x (1 - \\theta)^{n - x}$$ conjugate beta(\\(\\alpha, \\beta\\)) prior probability density function: $$p(\\theta; \\alpha, \\beta) = \\frac{1}{B(\\alpha, \\beta)} \\theta^{\\alpha - 1} (1 - \\theta)^{\\beta - 1}$$ hypergeometric: hypergeometric distribution defined : $$f(x, n, K, N) = \\frac{{K \\choose x} {N - K \\choose n - x}}{{N \\choose n}}$$ conjugate beta-binomial(\\(\\alpha, \\beta\\)) prior (Dyer Pierce, 1993) probability mass function: $$f(x, n, \\alpha, \\beta) = {n \\choose x} \\frac{B(x + \\alpha, n - x + \\beta)}{B(\\alpha, \\beta)}$$","code":""},{"path":"/reference/auditPrior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prior Distributions for Audit Sampling — auditPrior","text":"Derks, K., de Swart, J., Wagenmakers, E.-J., Wille, J., & Wetzels, R. (2021). JASP audit: Bayesian tools auditing practice. Journal Open Source Software, 6(68), 2733. Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., & Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636.","code":""},{"path":[]},{"path":"/reference/auditPrior.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prior Distributions for Audit Sampling — auditPrior","text":"Koen Derks, k.derks@nyenrode.nl","code":""},{"path":"/reference/auditPrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior Distributions for Audit Sampling — auditPrior","text":"","code":"# Default uniform beta(1, 1) prior distribution auditPrior(method = \"default\", likelihood = \"binomial\") #>  #> \tPrior Distribution for Audit Sampling #>  #> functional form: beta(α = 1, β = 1)  #> parameters obtained via method 'default'  # Translate inherent risk (ir) and control risk (cr) to a gamma prior distribution auditPrior(method = \"arm\", expected = 0.025, materiality = 0.05, ir = 1, cr = 0.6) #>  #> \tPrior Distribution for Audit Sampling #>  #> functional form: gamma(α = 2.325, β = 53)  #> parameters obtained via method 'arm'  # Impartial beta prior distribution (equal prior probabilities) auditPrior(method = \"impartial\", likelihood = \"binomial\", materiality = 0.05) #>  #> \tPrior Distribution for Audit Sampling #>  #> functional form: beta(α = 1, β = 13.513)  #> parameters obtained via method 'impartial'"},{"path":"/reference/carrier.html","id":null,"dir":"Reference","previous_headings":"","what":"Carrier Company Financial Statements — carrier","title":"Carrier Company Financial Statements — carrier","text":"Fictional data carrier company Europe, containing 202 ledger items across 10 company entities.","code":""},{"path":"/reference/carrier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Carrier Company Financial Statements — carrier","text":"","code":"data(carrier)"},{"path":"/reference/carrier.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Carrier Company Financial Statements — carrier","text":"data frame 202 rows 12 variables. description description ledger item. entity1 recorded values entity 1, US dollars. entity2 recorded values entity 2, US dollars. entity3 recorded values entity 3, US dollars. entity4 recorded values entity 4, US dollars. entity5 recorded values entity 5, US dollars. entity6 recorded values entity 6, US dollars. entity7 recorded values entity 7, US dollars. entity8 recorded values entity 8, US dollars. entity9 recorded values entity 9, US dollars. entity10 recorded values entity 10, US dollars. total total value, US dollars.","code":""},{"path":"/reference/carrier.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Carrier Company Financial Statements — carrier","text":"https://towardsdatascience.com/data-driven-audit-1-automated-sampling-using-python-52e83347add5","code":""},{"path":"/reference/carrier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Carrier Company Financial Statements — carrier","text":"","code":"data(carrier)"},{"path":"/reference/evaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a Statistical Audit Sample — evaluation","title":"Evaluate a Statistical Audit Sample — evaluation","text":"evaluation() used perform statistical inference misstatement audit population. allows specification statistical requirements sample respect performance materiality precision. evaluation() returns object class jfaEvaluation can used associated summary() plot() methods. details use function, see package vignette: vignette('jfa', package = 'jfa')","code":""},{"path":"/reference/evaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a Statistical Audit Sample — evaluation","text":"","code":"evaluation(materiality = NULL, min.precision = NULL, method = 'poisson',            alternative = c('less', 'two.sided', 'greater'), conf.level = 0.95,            data = NULL, values = NULL, values.audit = NULL, times = NULL,            x = NULL, n = NULL, N.units = NULL, N.items = NULL,            r.delta = 2.7, m.type = 'accounts', cs.a = 1, cs.b = 3, cs.mu = 0.5,            prior = FALSE)"},{"path":"/reference/evaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a Statistical Audit Sample — evaluation","text":"materiality numeric value 0 1 specifying performance materiality (.e., maximum tolerable misstatement) fraction total number units population. Can NULL, min.precision specified case. used methods direct, difference, quotient, regression. min.precision numeric value 0 1 specifying minimum precision (.e., upper bound minus likely error) fraction total population size. Can NULL, materiality specified case. method character specifying inference method. Possible options poisson (default), binomial, hypergeometric, mpu, stringer, stringer.meikle, stringer.lta, stringer.pvz, rohrbach, moment, direct, difference, quotient, regression. See details section information. alternative character indicating alternative hypothesis type confidence / credible interval. Possible options less (default), two.sided, greater. conf.level numeric value 0 1 specifying confidence level. data data frame containing data sample. values character specifying name column data containing book values items. values.audit character specifying name column data containing audit (true) values items. times character specifying name column data containing number times item data counted (e.g., due selected multiple times sample). x numeric value larger 0 specifying sum (proportional) misstatements sample. specified, overrides data, values values.audit arguments assumes data come summary statistics specified x n. n integer larger 0 specifying number items sample. specified, overrides data, values values.audit arguments assumes data come summary statistics specified x n. N.units integer larger 0 specifying number units population. used methods hypergeometric, direct, difference, quotient, regression. N.items integer larger 0 specifying number items population. used methods direct, difference, quotient, regression. r.delta numeric value specifying \\(\\Delta\\) Rohrbach's augmented variance bound (Rohrbach, 1993). used method rohrbach. m.type character specifying type population (Dworin Grimlund, 1984). Possible options accounts inventory. used method moment. cs.numeric value specifying \\(\\alpha\\) parameter prior distribution mean taint. used method coxsnell. cs.b numeric value specifying \\(\\beta\\) parameter prior distribution mean taint. used method coxsnell. cs.mu numeric value 0 1 specifying mean prior distribution mean taint. used method coxsnell. prior logical specifying whether use prior distribution, object class jfaPrior jfaPosterior containing prior distribution. FALSE (default), performs classical planning. TRUE, performs Bayesian planning using default conjugate prior.","code":""},{"path":"/reference/evaluation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a Statistical Audit Sample — evaluation","text":"object class jfaEvaluation containing: conf.level numeric value 0 1 giving confidence level. mle numeric value 0 1 giving likely error population. ub numeric value 0 1 giving upper bound population misstatement. lb numeric value 0 1 giving lower bound population misstatement. precision numeric value 0 1 giving difference likely error upper bound. p.value classical tests, numeric value giving one-sided p-value. x integer larger , equal , 0 giving number sample errors. t value larger , equal , 0, giving sum proportional sample errors. n integer larger 0 giving sample size. materiality materiality specified, numeric value 0 1 giving performance materiality fraction number units population. min.precision min.precision specified, numeric value 0 1 giving minimum precision fraction number units population. alternative character indicating alternative hypothesis. method character indicating inference method. N.units N.units specified, integer larger 0 indicating number units population. N.items N.items specified, integer larger 0 indicating number items population. K method = 'hypergeometric', integer indicating assumed total errors population. prior object class 'jfaPrior' contains prior distribution. posterior object class 'jfaPosterior' contains posterior distribution. data data frame containing relevant columns data. data.name character giving name data.","code":""},{"path":"/reference/evaluation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a Statistical Audit Sample — evaluation","text":"section lists available options methods argument. poisson:         Evaluates sample Poisson distribution. combined prior = TRUE, performs Bayesian evaluation using gamma prior posterior. binomial:        Evaluates sample binomial distribution. combined prior = TRUE, performs Bayesian evaluation using beta prior posterior. hypergeometric:  Evaluates sample hypergeometric distribution. combined prior = TRUE, performs Bayesian evaluation using beta-binomial prior posterior. mpu:             Evaluates sample mean-per-unit estimator. stringer:        Evaluates sample Stringer bound (Stringer, 1963). stringer.meikle: Evaluates sample Stringer bound Meikle's correction understatements (Meikle, 1972). stringer.lta:    Evaluates sample Stringer bound LTA correction understatements (Leslie, Teitlebaum, Anderson, 1979). stringer.pvz:    Evaluates sample Stringer bound Pap van Zuijlen's correction understatements (Pap van Zuijlen, 1996). rohrbach:        Evaluates sample Rohrbach's augmented variance bound (Rohrbach, 1993). moment:          Evaluates sample modified moment bound (Dworin Grimlund, 1984). coxsnell:        Evaluates sample Cox Snell bound (Cox Snell, 1979). direct:          Evaluates sample direct estimator (Touw Hoogduin, 2011). difference:      Evaluates sample difference estimator (Touw Hoogduin, 2011). quotient:        Evaluates sample quotient estimator (Touw Hoogduin, 2011). regression:      Evaluates sample regression estimator (Touw Hoogduin, 2011).","code":""},{"path":"/reference/evaluation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate a Statistical Audit Sample — evaluation","text":"Cox, D. Snell, E. (1979). sampling estimation rare errors. Biometrika, 66(1), 125-132. Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., & Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636. Dworin, L. D. Grimlund, R. . (1984). Dollar-unit sampling accounts receivable inventory. Accounting Review, 59(2), 218–241 Leslie, D. ., Teitlebaum, . D., & Anderson, R. J. (1979). Dollar-unit Sampling: Practical Guide Auditors. Copp Clark Pitman; Belmont, Calif.: distributed Fearon-Pitman. Meikle, G. R. (1972). Statistical Sampling Audit Context: Audit Technique. Canadian Institute Chartered Accountants. Pap, G., van Zuijlen, M. C. (1996). asymptotic behavior Stringer bound. Statistica Neerlandica, 50(3), 367-389. Rohrbach, K. J. (1993). Variance augmentation achieve nominal coverage probability sampling audit populations. Auditing, 12(2), 79. Stringer, K. W. (1963). Practical aspects statistical sampling auditing. Proceedings Business Economic Statistics Section (pp. 405-411). American Statistical Association. Touw, P., Hoogduin, L. (2011). Statistiek voor Audit en Controlling. Boom uitgevers Amsterdam.","code":""},{"path":[]},{"path":"/reference/evaluation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate a Statistical Audit Sample — evaluation","text":"Koen Derks, k.derks@nyenrode.nl","code":""},{"path":"/reference/evaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a Statistical Audit Sample — evaluation","text":"","code":"data(\"BuildIt\")  # Draw a sample of 100 monetary units from the population using # fixed interval monetary unit sampling sample <- selection(   data = BuildIt, size = 100, units = \"values\",   method = \"interval\", values = \"bookValue\" )$sample  # Classical evaluation using the Stringer bound evaluation(   materiality = 0.05, method = \"stringer\", conf.level = 0.95,   data = sample, values = \"bookValue\", values.audit = \"auditValue\" ) #>  #> \tClassical Audit Sample Evaluation #>  #> data:  sample #> number of errors = 4, number of samples = 100, taint = 2.4 #> 95 percent confidence interval: #>  0.00000000 0.06532286 #> estimate: #>  0.0239999  #> estimates obtained via method 'stringer'  # Classical evaluation using the Poisson likelihood evaluation(   materiality = 0.05, method = \"poisson\", conf.level = 0.95,   data = sample, values = \"bookValue\", values.audit = \"auditValue\" ) #>  #> \tClassical Audit Sample Evaluation #>  #> data:  sample #> number of errors = 4, number of samples = 100, taint = 2.4, p-value = #> 0.1747 #> alternative hypothesis: true misstatement rate is less than 0.05 #> 95 percent confidence interval: #>  0.00000000 0.06887548 #> estimate: #>  0.0239999  #> estimates obtained via method 'poisson'  # Bayesian evaluation using a noninformative gamma prior distribution evaluation(   materiality = 0.05, method = \"poisson\", conf.level = 0.95,   data = sample, values = \"bookValue\", values.audit = \"auditValue\",   prior = TRUE ) #>  #> \tBayesian Audit Sample Evaluation #>  #> data:  sample #> number of errors = 4, number of samples = 100, taint = 2.4, BF₁₀ = #> 95.641 #> alternative hypothesis: true misstatement rate is less than 0.05 #> 95 percent credible interval: #>  0.00000000 0.06819355 #> estimate: #>  0.02376227  #> estimates obtained via method 'poisson' + 'prior'  # Bayesian evaluation using an informed prior distribution evaluation(   materiality = 0.05, method = \"poisson\", conf.level = 0.95,   data = sample, values = \"bookValue\", values.audit = \"auditValue\",   prior = auditPrior(method = \"param\", alpha = 1, beta = 10) ) #>  #> \tBayesian Audit Sample Evaluation #>  #> data:  sample #> number of errors = 4, number of samples = 100, taint = 2.4, BF₁₀ = #> 10.548 #> alternative hypothesis: true misstatement rate is less than 0.05 #> 95 percent credible interval: #>  0.00000000 0.06261408 #> estimate: #>  0.02181809  #> estimates obtained via method 'poisson' + 'prior'"},{"path":"/reference/jfa-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for jfa objects — jfa-methods","title":"Methods for jfa objects — jfa-methods","text":"Methods defined objects returned auditPrior, planning, selection, evaluation functions.","code":""},{"path":"/reference/jfa-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for jfa objects — jfa-methods","text":"","code":"# S3 method for jfaPrior print(x, ...)  # S3 method for jfaPosterior print(x, ...)  # S3 method for jfaPlanning print(x, ...)  # S3 method for jfaSelection print(x, ...)  # S3 method for jfaEvaluation print(x, digits = getOption(\"digits\"), ...)  # S3 method for summary.jfaPrior print(x, digits = getOption(\"digits\"), ...)  # S3 method for summary.jfaPosterior print(x, digits = getOption(\"digits\"), ...)  # S3 method for summary.jfaPlanning print(x, digits = getOption(\"digits\"), ...)  # S3 method for summary.jfaSelection print(x, digits = getOption(\"digits\"), ...)  # S3 method for summary.jfaEvaluation print(x, digits = getOption(\"digits\"), ...)  # S3 method for jfaPrior summary(object, digits = getOption(\"digits\"), ...)  # S3 method for jfaPosterior summary(object, digits = getOption(\"digits\"), ...)  # S3 method for jfaPlanning summary(object, digits = getOption(\"digits\"), ...)  # S3 method for jfaSelection summary(object, digits = getOption(\"digits\"), ...)  # S3 method for jfaEvaluation summary(object, digits = getOption(\"digits\"), ...)  # S3 method for jfaPrior predict(object, n, lim = NULL, cumulative = FALSE, ...)  # S3 method for jfaPosterior predict(object, n, lim = NULL, cumulative = FALSE, ...)  # S3 method for jfaPrior plot(x, xlim = c(0, 1), ...)  # S3 method for jfaPosterior plot(x, xlim = c(0, 1), ...)  # S3 method for jfaPlanning plot(x, xlim = c(0, 1), ...)  # S3 method for jfaSelection plot(x, ...)  # S3 method for jfaEvaluation plot(x, xlim = c(0, 1), ...)"},{"path":"/reference/jfa-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for jfa objects — jfa-methods","text":"... arguments, currently ignored. digits integer specifying number digits output rounded. Used summary. object, x object class jfaPrior, jfaPosterior, jfaPlanning, jfaSelection, jfaEvaluation. n used predict. Specifies sample size predictions made. lim used predict. Limits number errors predictions made. cumulative used predict. Specifies whether cumulative probabilities shown. xlim used plot. Specifies x limits (x1, x2) plot.","code":""},{"path":"/reference/jfa-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for jfa objects — jfa-methods","text":"summary methods return data.frame contains input output. print methods simply print return nothing.","code":""},{"path":"/reference/jfa.html","id":null,"dir":"Reference","previous_headings":"","what":"jfa --- Bayesian and Classical Audit Sampling — jfa-package","title":"jfa --- Bayesian and Classical Audit Sampling — jfa-package","text":"jfa R package statistical audit sampling. package provides functions planning,    performing, evaluating, reporting audit sample. Specifically, functions implement    standard audit sampling techniques calculating sample sizes, selecting items population,    evaluating misstatement data sample summary statistics. Additionally,    jfa package allows user create prior probability distribution perform Bayesian    audit sampling using functions. package intended workflow also implemented graphical user interface Audit module    JASP, free open-source statistical software program. documentation jfa , including manual user guide   package, worked examples,   tutorial information visit package website.","code":""},{"path":"/reference/jfa.html","id":"reference-tables","dir":"Reference","previous_headings":"","what":"Reference tables","title":"jfa --- Bayesian and Classical Audit Sampling — jfa-package","text":"can find several links reference tables contain statistical sample sizes, upper limits, Bayes factors.    tables created using planning() evaluation() functions provided package. See    corresponding help files information functions replicate output. Sample sizes Sample sizes based Poisson distribution Sample sizes based binomial distribution Sample sizes based hypergeometric distribution Upper limits Upper limits based Poisson distribution Upper limits based binomial distribution Upper limits based hypergeometric distribution One-sided p values One sided p values based Poisson distribution One sided p values based binomial distribution One sided p values based hypergeometric distribution Bayes factors Impartial Bayes factors based gamma distribution Impartial Bayes factors based beta distribution Impartial Bayes factors based beta-binomial distribution","code":""},{"path":"/reference/jfa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jfa --- Bayesian and Classical Audit Sampling — jfa-package","text":"Please use citation provided R citing package.    BibTex entry available citation('jfa').","code":""},{"path":[]},{"path":"/reference/jfa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"jfa --- Bayesian and Classical Audit Sampling — jfa-package","text":"","code":"# Load the jfa package library(jfa)  # Load the BuildIt population data('BuildIt')  ############################################ ### Example 1: Classical audit sampling #### ############################################  # Stage 1: Planning stage1 <- planning(materiality = 0.03, expected = 0.01,                     likelihood = 'poisson', conf.level = 0.95) summary(stage1) #>  #> \tClassical Audit Sample Planning Summary #>  #> Options: #>   Confidence level:              0.95  #>   Materiality:                   0.03  #>   Hypotheses:                    H₀: Θ >= 0.03 vs. H₁: Θ < 0.03  #>   Expected:                      0.01  #>   Likelihood:                    poisson  #>  #> Results: #>   Minimum sample size:           220  #>   Tolerable errors:              2.2  #>   Expected most likely error:    0.01  #>   Expected upper bound:          0.02997  #>   Expected precision:            0.01997  #>   Expected p-value:              < 2.22e-16   # Stage 2: Selection stage2 <- selection(data = BuildIt, size = stage1,                     units = 'values', values = 'bookValue',                     method = 'interval', start = 1) summary(stage2) #>  #> \tAudit Sample Selection Summary #>  #> Options: #>   Requested sample size:         220  #>   Sampling units:                monetary units  #>   Method:                        fixed interval sampling  #>   Starting point:                1  #>  #> Data: #>   Population size:               3500  #>   Population value:              1403221  #>   Selection interval:            6378.3  #>  #> Results: #>   Selected sampling units:       220  #>   Proportion of value:           0.0001568  #>   Selected items:                220  #>   Proportion of size:            0.062857   # Stage 3: Execution sample <- stage2[['sample']]  # Stage 4: Evaluation stage4 <- evaluation(materiality = 0.03, method = 'stringer',                      conf.level = 0.95, data = sample,                      values = 'bookValue', values.audit = 'auditValue') summary(stage4) #>  #> \tClassical Audit Sample Evaluation Summary #>  #> Options: #>   Confidence level:               0.95  #>   Materiality:                    0.03  #>   Method:                         stringer  #>  #> Data: #>   Sample size:                    220  #>   Number of errors:               5  #>   Sum of taints:                  2.9999929  #>  #> Results: #>   Most likely error:              0.013636  #>   95 percent confidence interval: [0, 0.033724]  #>   Precision:                      0.020087   ###################################################################### ### Example 2: Bayesian audit sampling using a non-informed prior #### ######################################################################  # Create the prior distribution prior <- auditPrior(method = 'default', likelihood = 'poisson') summary(prior) #>  #> \tPrior Distribution Summary #>  #> Options: #>   Likelihood:                    poisson  #>   Specifics:                     noninformative  #>  #> Results: #>   Functional form:               gamma(α = 1, β = 1)  #>   Equivalent sample size:        1  #>   Equivalent errors:             0  #>   Mode:                          0  #>   Mean:                          1  #>   Median:                        0.69315  #>   Variance:                      1  #>   Skewness:                      2  #>   95 percent upper bound:        2.9957  #>   Precision:                     2.9957   # Stage 1: Planning stage1 <- planning(materiality = 0.03, expected = 0.01,                    likelihood = 'poisson', conf.level = 0.95, prior = prior) summary(stage1) #>  #> \tBayesian Audit Sample Planning Summary #>  #> Options: #>   Confidence level:              0.95  #>   Materiality:                   0.03  #>   Hypotheses:                    H₀: Θ > 0.03 vs. H₁: Θ < 0.03  #>   Expected:                      0.01  #>   Likelihood:                    poisson  #>   Prior distribution:            gamma(α = 1, β = 1)  #>  #> Results: #>   Minimum sample size:           218  #>   Tolerable errors:              2.18  #>   Posterior distribution:        gamma(α = 3.18, β = 219)  #>   Expected most likely error:    0.0099543  #>   Expected upper bound:          0.029971  #>   Expected precision:            0.020017  #>   Expected BF₁₀:\t                 626.86   # Stage 2: Selection stage2 <- selection(data = BuildIt, size = stage1,                     units = 'values', values = 'bookValue',                     method = 'interval', start = 1) summary(stage2) #>  #> \tAudit Sample Selection Summary #>  #> Options: #>   Requested sample size:         218  #>   Sampling units:                monetary units  #>   Method:                        fixed interval sampling  #>   Starting point:                1  #>  #> Data: #>   Population size:               3500  #>   Population value:              1403221  #>   Selection interval:            6436.8  #>  #> Results: #>   Selected sampling units:       218  #>   Proportion of value:           0.0001554  #>   Selected items:                218  #>   Proportion of size:            0.062286   # Stage 3: Execution sample <- stage2[['sample']]  # Stage 4: Evaluation stage4 <- evaluation(materiality = 0.03, conf.level = 0.95, data = sample,                      values = 'bookValue', values.audit = 'auditValue',                      prior = prior) summary(stage4) #>  #> \tBayesian Audit Sample Evaluation Summary #>  #> Options: #>   Confidence level:               0.95  #>   Materiality:                    0.03  #>   Materiality:                    0.03  #>   Hypotheses:                     H₀: Θ > 0.03 vs. H₁: Θ < 0.03  #>   Method:                         poisson  #>   Prior distribution:             gamma(α = 1, β = 1)  #>  #> Data: #>   Sample size:                    218  #>   Number of errors:               4  #>   Sum of taints:                  2.4000172  #>  #> Results: #>   Posterior distribution:         gamma(α = 3.4, β = 219)  #>   Most likely error:              0.010959  #>   95 percent credible interval:   [0, 0.03145]  #>   Precision:                      0.020491  #>   BF₁₀:\t                          493.5   ################################################################### ### Example 3: Bayesian audit sampling using an informed prior #### ###################################################################  # Create the prior distribution prior <- auditPrior(method = 'arm', likelihood = 'poisson',                     expected = 0.01, materiality = 0.03, cr = 0.6, ir = 1) summary(prior) #>  #> \tPrior Distribution Summary #>  #> Options: #>   Likelihood:                    poisson  #>   Specifics:                     ir = 1; cr = 0.6; dr = 0.0833333  #>  #> Results: #>   Functional form:               gamma(α = 1.46, β = 46)  #>   Equivalent sample size:        46  #>   Equivalent errors:             0.46  #>   Mode:                          0.01  #>   Mean:                          0.031739  #>   Median:                        0.024859  #>   Variance:                      0.00069  #>   Skewness:                      1.6552  #>   95 percent upper bound:        0.08343  #>   Precision:                     0.07343   # Stage 1: Planning stage1 <- planning(materiality = 0.03, expected = 0.01,                    likelihood = 'poisson', conf.level = 0.95, prior = prior) summary(stage1) #>  #> \tBayesian Audit Sample Planning Summary #>  #> Options: #>   Confidence level:              0.95  #>   Materiality:                   0.03  #>   Hypotheses:                    H₀: Θ > 0.03 vs. H₁: Θ < 0.03  #>   Expected:                      0.01  #>   Likelihood:                    poisson  #>   Prior distribution:            gamma(α = 1.46, β = 46)  #>  #> Results: #>   Minimum sample size:           174  #>   Tolerable errors:              1.74  #>   Posterior distribution:        gamma(α = 3.2, β = 220)  #>   Expected most likely error:    0.01  #>   Expected upper bound:          0.02997  #>   Expected precision:            0.01997  #>   Expected BF₁₀:\t                 13.593   # Stage 2: Selection stage2 <- selection(data = BuildIt, size = stage1,                     units = 'values', values = 'bookValue',                     method = 'interval', start = 1) summary(stage2) #>  #> \tAudit Sample Selection Summary #>  #> Options: #>   Requested sample size:         174  #>   Sampling units:                monetary units  #>   Method:                        fixed interval sampling  #>   Starting point:                1  #>  #> Data: #>   Population size:               3500  #>   Population value:              1403221  #>   Selection interval:            8064.5  #>  #> Results: #>   Selected sampling units:       174  #>   Proportion of value:           0.000124  #>   Selected items:                174  #>   Proportion of size:            0.049714   # Stage 3: Execution sample <- stage2[['sample']]  # Stage 4: Evaluation stage4 <- evaluation(materiality = 0.03, conf.level = 0.95, data = sample,                      values = 'bookValue', values.audit = 'auditValue',                      prior = prior) summary(stage4) #>  #> \tBayesian Audit Sample Evaluation Summary #>  #> Options: #>   Confidence level:               0.95  #>   Materiality:                    0.03  #>   Materiality:                    0.03  #>   Hypotheses:                     H₀: Θ > 0.03 vs. H₁: Θ < 0.03  #>   Method:                         poisson  #>   Prior distribution:             gamma(α = 1.46, β = 46)  #>  #> Data: #>   Sample size:                    174  #>   Number of errors:               4  #>   Sum of taints:                  2.4000247  #>  #> Results: #>   Posterior distribution:         gamma(α = 3.86, β = 220)  #>   Most likely error:              0.013  #>   95 percent credible interval:   [0, 0.034335]  #>   Precision:                      0.021335  #>   BF₁₀:\t                          6.9023"},{"path":"/reference/planning.html","id":null,"dir":"Reference","previous_headings":"","what":"Plan a Statistical Audit Sample — planning","title":"Plan a Statistical Audit Sample — planning","text":"planning() used calculate minimum sample size audit samples. allows specification statistical requirements sample respect performance materiality precision. planning() returns object class jfaPlanning can used associated summary() plot() methods. details use function, see package vignette: vignette('jfa', package = 'jfa')","code":""},{"path":"/reference/planning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plan a Statistical Audit Sample — planning","text":"","code":"planning(materiality = NULL, min.precision = NULL, expected = 0,          likelihood = c('poisson', 'binomial', 'hypergeometric'),          conf.level = 0.95, N.units = NULL, by = 1, max = 5000,          prior = FALSE)"},{"path":"/reference/planning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plan a Statistical Audit Sample — planning","text":"materiality numeric value 0 1 specifying performance materiality (.e., maximum tolerable misstatement) fraction total number units population. Can NULL, min.precision specified case. min.precision numeric value 0 1 specifying minimum precision (.e., upper bound minus likely error) fraction total population size. Can NULL, materiality specified case. expected numeric value 0 1 specifying expected / tolerable errors sample relative total sample size, number (>= 1) specifying expected / tolerable number errors sample. advised set value conservatively minimize probability observed errors exceeding expected errors, imply insufficient work done end. likelihood character specifying likelihood data. Possible options poisson (default) Poisson likelihood, binomial binomial likelihood, hypergeometric hypergeometric likelihood. See details section information available likelihoods. conf.level numeric value 0 1 specifying confidence level. N.units numeric value larger 0 specifying total number units population. used hypergeometric likelihood. integer larger 0 specifying increment possible sample sizes. max integer larger 0 specifying sample size algorithm terminates. prior logical specifying whether use prior distribution, object class jfaPrior jfaPosterior. FALSE (default), performs classical planning. TRUE, performs Bayesian planning using default conjugate prior.","code":""},{"path":"/reference/planning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plan a Statistical Audit Sample — planning","text":"object class jfaPlanning containing: conf.level numeric value 0 1 giving confidence level. x numeric value larger , equal , 0 giving (proportional sum ) tolerable errors sample. n integer larger 0 giving minimal sample size. ub numeric value 0 1 giving expected upper bound. precision numeric value 0 1 giving expected precision. p.value numeric value giving expected one-sided p-value. K likelihood = 'hypergeometric', integer larger 0 giving assumed population errors. N.units integer larger 0 giving number units population (returned N.units specified). materiality numeric value 0 1 giving performance materiality specified. min.precision numeric value 0 1 giving minimum precision specified. expected numeric value larger , equal , 0 giving expected errors input. likelihood character indicating likelihood. errorType character indicating whether expected errors input type. iterations integer giving number iterations algorithm. prior prior distribution specified, object class jfaPrior contains information prior distribution. posterior prior distribution specified, object class jfaPosterior contains information expected posterior distribution.","code":""},{"path":"/reference/planning.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plan a Statistical Audit Sample — planning","text":"section elaborates available likelihoods corresponding prior distributions likelihood argument. poisson:          Poisson distribution approximation binomial distribution. Poisson distribution defined : $$f(\\theta, n) = \\frac{\\lambda^\\theta e^{-\\lambda}}{\\theta!}$$ conjugate gamma(\\(\\alpha, \\beta\\)) prior probability density function: $$p(\\theta; \\alpha, \\beta) = \\frac{\\beta^\\alpha \\theta^{\\alpha - 1} e^{-\\beta \\theta}}{\\Gamma(\\alpha)}$$ binomial:         binomial distribution approximation hypergeometric distribution. binomial distribution defined : $$f(\\theta, n, x) = {n \\choose x} \\theta^x (1 - \\theta)^{n - x}$$ conjugate beta(\\(\\alpha, \\beta\\)) prior probability density function: $$p(\\theta; \\alpha, \\beta) = \\frac{1}{B(\\alpha, \\beta)} \\theta^{\\alpha - 1} (1 - \\theta)^{\\beta - 1}$$ hypergeometric:   hypergeometric distribution defined : $$f(x, n, K, N) = \\frac{{K \\choose x} {N - K \\choose n - x}}{{N \\choose n}}$$ conjugate beta-binomial(\\(\\alpha, \\beta\\)) prior (Dyer Pierce, 1993) probability mass function: $$f(x, n, \\alpha, \\beta) = {n \\choose x} \\frac{B(x + \\alpha, n - x + \\beta)}{B(\\alpha, \\beta)}$$","code":""},{"path":"/reference/planning.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plan a Statistical Audit Sample — planning","text":"Derks, K., de Swart, J., van Batenburg, P., Wagenmakers, E.-J., & Wetzels, R. (2021). Priors Bayesian audit: integration existing information prior distribution can improve audit transparency efficiency. International Journal Auditing, 25(3), 621-636. Dyer, D. Pierce, R.L. (1993). choice prior distribution hypergeometric sampling. Communications Statistics - Theory Methods, 22(8), 2125 - 2146.","code":""},{"path":[]},{"path":"/reference/planning.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plan a Statistical Audit Sample — planning","text":"Koen Derks, k.derks@nyenrode.nl","code":""},{"path":"/reference/planning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plan a Statistical Audit Sample — planning","text":"","code":"# Classical planning using a Poisson likelihood planning(materiality = 0.03, expected = 0.01, likelihood = \"poisson\") #>  #> \tClassical Audit Sample Planning #>  #> minimum sample size = 220  #> sample size obtained in 221 iteration(s) via method 'poisson'  # Bayesian planning using a noninformative beta prior distribution planning(   materiality = 0.05, expected = 0.025, likelihood = \"binomial\",   prior = TRUE ) #>  #> \tBayesian Audit Sample Planning #>  #> minimum sample size = 220  #> sample size obtained in 221 iteration(s) via method 'binomial' + 'prior'  # Bayesian planning using an impartial gamma prior distribution planning(   materiality = 0.05, expected = 0, likelihood = \"poisson\",   prior = auditPrior(method = \"impartial\", materiality = 0.05) ) #>  #> \tBayesian Audit Sample Planning #>  #> minimum sample size = 47  #> sample size obtained in 48 iteration(s) via method 'poisson' + 'prior'"},{"path":"/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Audit Sampling Report — report","title":"Create an Audit Sampling Report — report","text":"report() takes object class jfaEvaluation returned evaluation() function automatically generates html pdf report results. details use function, see package vignette: vignette('jfa', package = 'jfa')","code":""},{"path":"/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Audit Sampling Report — report","text":"","code":"report(object, file = 'report.html', format = c('html_document', 'pdf_document'))"},{"path":"/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Audit Sampling Report — report","text":"object object class jfaEvaluation returned evaluation() function. file character specifying name report (e.g. report.html). format character specifying output format report. Possible options html_document (default) pdf_document, compiling pdf format requires local version MikTex.","code":""},{"path":"/reference/report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Audit Sampling Report — report","text":"html pdf file containing report evaluation.","code":""},{"path":[]},{"path":"/reference/report.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create an Audit Sampling Report — report","text":"Koen Derks, k.derks@nyenrode.nl","code":""},{"path":"/reference/report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Audit Sampling Report — report","text":"","code":"data(\"BuildIt\")  # Draw a sample of 100 monetary units from the population using # fixed interval monetary unit sampling sample <- selection(   data = BuildIt, size = 100, method = \"interval\",   units = \"values\", values = \"bookValue\" )$sample  # Evaluate using the Stringer bound result <- evaluation(   conf.level = 0.95, materiality = 0.05, method = \"stringer\",   data = sample, values = \"bookValue\", values.audit = \"auditValue\" ) if (FALSE) { report(result) }"},{"path":"/reference/selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a Statistical Audit Sample — selection","title":"Select a Statistical Audit Sample — selection","text":"selection() used perform statistical selection audit samples. offers flexible implementations common audit sampling algorithms attributes sampling monetary unit sampling. selection() returns object class jfaSelection can used associated summary() plot() methods. details use function, see package vignette: vignette('jfa', package = 'jfa')","code":""},{"path":"/reference/selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a Statistical Audit Sample — selection","text":"","code":"selection(data, size, units = c('items', 'values'),           method = c('interval', 'cell', 'random', 'sieve'), values = NULL,           order = NULL, decreasing = FALSE, randomize = FALSE,           replace = FALSE, start = 1)"},{"path":"/reference/selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a Statistical Audit Sample — selection","text":"data data frame containing population data. size integer larger 0 specifying number units select. Can also object class jfaPlanning. units character specifying type sampling units. Possible options items (default) selection level items (rows) values selection level monetary units. method character specifying sampling algorithm. Possible options interval (default) fixed interval sampling, cell cell sampling, random random sampling, sieve modified sieve sampling. values character specifying name column data containing book values items. order character specifying name column data containing ranks items. items data ordered according values order indicated decreasing. decreasing logical specifying whether order items smallest largest. used order specified. randomize logical specifying items randomly shuffled prior selection. Note randomize = TRUE overrules order. replace logical specifying sampling units selected replacement. used method random. start integer larger 0 specifying index unit selected. used method interval.","code":""},{"path":"/reference/selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a Statistical Audit Sample — selection","text":"object class jfaSelection containing: data data frame containing population data. sample data frame containing selected data sample. n.req integer giving requested sample size. n.units integer giving number obtained sampling units. n.items integer giving number obtained sample items. N.units integer giving number sampling units population data. N.items integer giving number items population data. interval method = 'interval', numeric value giving size selection interval. units character indicating type sampling units. method character indicating sampling algorithm. values values specified, character indicating book value column. start method = 'interval', integer giving index selected unit interval. data.name character indicating name population data.","code":""},{"path":"/reference/selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select a Statistical Audit Sample — selection","text":"section elaborates possible options units argument: items:  attributes sampling item population sampling unit. item book value $5000 therefore equally likely selected item book value $500. values: monetary unit sampling monetary unit population sampling unit. item book value $5000 therefore ten times likely selected item book value $500. section elaborates possible options method argument: interval: fixed interval sampling sampling units divided number equally large intervals. interval, single sampling unit selected according fixed starting point (specified start). cell:     cell sampling sampling units population divided number (equal sample size) equally large intervals. interval, single sampling unit selected randomly. random:   random sampling sampling units drawn equal probability. sieve:    modified sieve sampling items selected largest sieve ratio (Hoogduin, Hall, & Tsay, 2010).","code":""},{"path":"/reference/selection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select a Statistical Audit Sample — selection","text":"Hoogduin, L. ., Hall, T. W., & Tsay, J. J. (2010). Modified sieve sampling: method single-multi-stage probability-proportional--size sampling. Auditing: Journal Practice & Theory, 29(1), 125-148. Leslie, D. ., Teitlebaum, . D., & Anderson, R. J. (1979). Dollar-unit Sampling: Practical Guide Auditors. Copp Clark Pitman; Belmont, Calif.: distributed Fearon-Pitman. Wampler, B., & McEacharn, M. (2005). Monetary-unit sampling using Microsoft Excel. CPA journal, 75(5), 36.","code":""},{"path":[]},{"path":"/reference/selection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Select a Statistical Audit Sample — selection","text":"Koen Derks, k.derks@nyenrode.nl","code":""},{"path":"/reference/selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a Statistical Audit Sample — selection","text":"","code":"data(\"BuildIt\")  # Select 100 items using random sampling selection(data = BuildIt, size = 100, method = \"random\") #>  #> \tAudit Sample Selection #>  #> data:  BuildIt #> number of sampling units = 100, number of items = 100 #> sample selected via method 'items' + 'random'  # Select 150 monetary units using fixed interval sampling selection(   data = BuildIt, size = 150, units = \"values\",   method = \"interval\", values = \"bookValue\" ) #>  #> \tAudit Sample Selection #>  #> data:  BuildIt #> number of sampling units = 150, number of items = 150 #> sample selected via method 'values' + 'interval'"},{"path":"/news/index.html","id":"jfa-063","dir":"Changelog","previous_headings":"","what":"jfa 0.6.3","title":"jfa 0.6.3","text":"CRAN release: 2022-02-21 Minor changes value x evaluation() expected planning() now automatically ceiled (throwing warning) method = \"hypergeometric\". Improved overall documentation.","code":""},{"path":"/news/index.html","id":"jfa-062","dir":"Changelog","previous_headings":"","what":"jfa 0.6.2","title":"jfa 0.6.2","text":"CRAN release: 2022-01-23 Major changes Removed output functions related class jfaPredictive. probabilities prior posterior predictive distributions can obtained calling predict() function. Minor changes value N.units auditPrior(), planning(), evaluation() now automatically ceiled likelihood/method = 'hypergeometric'. Implemented warning message likelihood prior match likelihood/method inputs planning() evaluation(). likelihood prior leading cases overrule options.","code":""},{"path":"/news/index.html","id":"jfa-061","dir":"Changelog","previous_headings":"","what":"jfa 0.6.1","title":"jfa 0.6.1","text":"CRAN release: 2021-11-18 New features Added argument randomize selection() function, allows user randomly shuffle items population selection. Note specifying randomize = TRUE overrules order. Bug fixes Fixed bug maximum sample size reached (.e., planning stopped max - 1). Major changes order argument selection() longer accepts logical, instead takes column name ranking variable data. Minor changes Adjusted error text selection vignette. Rewritten vignettes.","code":""},{"path":"/news/index.html","id":"jfa-060","dir":"Changelog","previous_headings":"","what":"jfa 0.6.0","title":"jfa 0.6.0","text":"CRAN release: 2021-09-22 New features Added argument alternative possible options less (default), two.sided, greater evaluation() function allows control type hypothesis test perform type confidence / credible interval calculate. Added predict.jfaPrior() predict.jfaPosterior() produce predictions data prior posterior distribution. Added method = 'param' function auditPrior() takes input raw alpha beta parameters prior distribution. Added method = 'strict' function auditPrior() constructs (improper) prior distribution yields results (respect sample sizes upper limits) classical procedures. Added modified seed sampling algorithm (method = 'sieve') selection(). Added new vignette describes sampling methodology implemented jfa. objects auditPrior(), planning(), evaluation() now contain information posterior predictive distribution N.units specified. Major changes median -> impartial (auditPrior()) sampleK -> x (auditPrior()) sampleN -> n (auditPrior()) N -> N.units (auditPrior()) maxSize -> max (planning()) increase -> (planning()) withReplacement-> replace (selection()) ordered -> order (selection()) ascending -> decreasing (selection()) intervalStartingPoint -> start (selection()) algorithm -> method (selection()) expectedErrors -> expected (auditPrior() planning()) confidence -> conf.level (auditPrior(), planning(), evaluation()) pHmin -> p.hmin (auditPrior()) minPrecision -> min.precision (auditPrior(), planning(), evaluation()) population -> data (selection()) kSumstats -> x (evaluation()) nSumstats -> n (evaluation()) sample -> data (evaluation()) bookValues -> values (selection() evaluation()) auditValues -> values.audit (evaluation()) counts -> times (evaluation()) popBookValues -> N.units (evaluation()) rohrbachDelta -> r.delta (evaluation()) momentPopType -> m.type (evaluation()) csA -> cs.(evaluation()) csB -> cs.b (evaluation()) csMu -> cs.mu (evaluation()) records -> items (selection()) mus -> values (selection()) hypotheses -> hyp (auditPrior()) poisson now default likelihood / method functions since conservative. method = 'interval' now default selection method. default prior distributions used method = 'default' prior = TRUE now set gamma(1, 1), beta(1,1), beta-binomial(1, 1) priors. times (former counts) argument evaluation() must now indicated column name data instead vector. nPrior kPrior removed planning() evaluation() functions. prior distributions must now specified using prior = TRUE (noninformative priors) using call auditPrior(). Removed auditBF() function since value available evaluation(materiality = x, prior = auditPrior(method = 'impartial', materiality = x)) Minor changes now allowed x n value evaluation(). parameters impartial beta-binomial prior now calculated efficiently case zero expected errors.","code":""},{"path":"/news/index.html","id":"jfa-057","dir":"Changelog","previous_headings":"","what":"jfa 0.5.7","title":"jfa 0.5.7","text":"CRAN release: 2021-08-12 Minor changes logo now displayed ?jfa-package help file. cheat sheet link changed README file.","code":""},{"path":"/news/index.html","id":"jfa-056","dir":"Changelog","previous_headings":"","what":"jfa 0.5.6","title":"jfa 0.5.6","text":"CRAN release: 2021-07-06 Bug fixes Fixed bug print.jfaEvaluation() call performance materiality specified prior = TRUE.","code":""},{"path":"/news/index.html","id":"jfa-055","dir":"Changelog","previous_headings":"","what":"jfa 0.5.5","title":"jfa 0.5.5","text":"CRAN release: 2021-07-01 New features print() functions now return concise description relevant output. Added summary() functions returned objects take former (elaborate) output print() functions. Implemented new function auditBF() computes Bayes factors summary statistics audit sample. Bug fixes Fixed bug evaluation() likelihood stored prior properly passed function. Fixed error calculation posterior mode beta distribution. Minor changes Restored default value (0.95) ‘confidence’ argument applicable functions.","code":""},{"path":"/news/index.html","id":"jfa-054","dir":"Changelog","previous_headings":"","what":"jfa 0.5.4","title":"jfa 0.5.4","text":"CRAN release: 2021-06-02 New features Objects class jfaPosterior returned evaluation()$posterior planning()$expectedPosterior can now used input prior argument planning() evaluation() functions. Bug fixes Fixed bug method = 'bram' auditPrior() function prior parameters go infinity expectedError = 0. Major changes Now calculates upper bound population errors according hypergeometric distribution via inverted hypothesis test. result method, planning() function require value materiality anymore planning hypergeometric likelihood. Minor changes Added benchmark MUS package unit tests. Improved plots better titles axes labels.","code":""},{"path":"/news/index.html","id":"jfa-053","dir":"Changelog","previous_headings":"","what":"jfa 0.5.3","title":"jfa 0.5.3","text":"CRAN release: 2021-05-01 New features Made expectedErrors > 0 available method = 'hypotheses' auditPrior() function. Made method = 'hypotheses' method = 'impartial' auditPrior() function available likelihood = 'hypergeometric'. Added bram method auditPrior() function. method = 'bram' computes prior distribution given mode (expectedError) upper bound (ub). Bug fixes Fixed error mode gamma posterior distribution evaluation() function +1 added beta parameter, resulting slightly lower modes correct ones. Made correction calculation beta-binomial prior posterior posterior parameter N correct value N = N - n (current) instead N - n + k (). Major changes Removed default value confidence = 0.95 applicable functions. confidence currently default value user required give input. Changed default likelihood = 'poisson' planning() function likelihood = 'binomial' consistent across functions. Changed order function arguments materiality minPrecision among first ones shown. Minor changes Updated documentation functions simple examples.","code":""},{"path":"/news/index.html","id":"jfa-052","dir":"Changelog","previous_headings":"","what":"jfa 0.5.2","title":"jfa 0.5.2","text":"CRAN release: 2021-04-02 New features Update poisson evaluation calculation allows fractional errors. Bug fixes Fixed error hypergeometric upper bound calculation accidentally based phyper() function instead qhyper() function, resulted lower bounds usual. Minor changes Add statistical tables output (sample sizes, upper limits, Bayes factors) GitHub repository pdf format. Changed computation method sample sizes hypergeometric beta-binomial distributions faster.","code":""},{"path":"/news/index.html","id":"jfa-051","dir":"Changelog","previous_headings":"","what":"jfa 0.5.1","title":"jfa 0.5.1","text":"CRAN release: 2021-03-02 Bug fixes Reduced size tarball adding files .Rbuildignore Fixed bug selection() population sorted modified, bv still retained old ordering data. resulting sample overweighted towards small values /still contained negative values (Thanks @alvanson).","code":""},{"path":"/news/index.html","id":"jfa-050","dir":"Changelog","previous_headings":"","what":"jfa 0.5.0","title":"jfa 0.5.0","text":"CRAN release: 2021-01-04 New features Add function report() automatically generates audit report. Major changes Removed sampling() function, now replaced entirely selection() function. Changed output evaluation() function estimator used.","code":""},{"path":"/news/index.html","id":"jfa-040","dir":"Changelog","previous_headings":"","what":"jfa 0.4.0","title":"jfa 0.4.0","text":"CRAN release: 2020-10-30 New features Added digits argument internal jfa:::print.jfaPrior(), jfa:::print.jfaPlanning(), jfa:::print.jfaSelection(), jfa:::print.jfaEvaluation() functions control rounding printing. Added description, statistics, specifics hypotheses output auditPrior() function. Added class jfaPosterior print() plot() methods. Added expectedPosterior class jfaPosterior output planning() function, includes description, statistics hypotheses. Added posterior class jfaPosterior output evaluation() function, includes description, statistics hypotheses. Bug fixes Implemented improved calculation prior parameters auditPrior() function method = impartial expectedErrors > 0. Major changes Add warning message sampling() function deprecated 0.5.0 onward. can use selection() instead, since sampling() causes namespace issues packages. Minor changes Changed class jfaSampling jfaSelection. consequences.","code":""},{"path":"/news/index.html","id":"jfa-031","dir":"Changelog","previous_headings":"","what":"jfa 0.3.1","title":"jfa 0.3.1","text":"CRAN release: 2020-10-12 Bug fixes Fixed bug planning() function allow user plan monetary sample population size low. Fixed bug planning() function allow user select non-integer number expected errors prior involved. Minor changes Added unit tests regularly verify results planning() evaluation() functions benchmarks.","code":""},{"path":"/news/index.html","id":"jfa-030","dir":"Changelog","previous_headings":"","what":"jfa 0.3.0","title":"jfa 0.3.0","text":"CRAN release: 2020-09-15 New features Implemented argument counts evaluation() function quantifies many times observation evaluated due selected multiple times selection stage.","code":""},{"path":"/news/index.html","id":"jfa-020","dir":"Changelog","previous_headings":"","what":"jfa 0.2.0","title":"jfa 0.2.0","text":"CRAN release: 2020-08-05 New features Implemented prior construction methods default, impartial, hypotheses, sample, factor auditPrior() function. addition already supported arm method, methods allow auditor incorporate sources audit information prior distribution. Implemented minPrecision argument planning() function allows auditors calculate sample size difference posterior upper confidence bound likely error lower set minimum precision. Also implemented evaluation() function requirement approve population. Return value mle evaluation() function, quantifies likely error. Also return value precision function. Implemented increase argument planning() function allows user increase sample size set amount step iterations. Minor changes Implemented efficient versions monetary unit sampling algorithms. Changed x-axis labels default plot theta instead misstatement.","code":""},{"path":"/news/index.html","id":"jfa-010","dir":"Changelog","previous_headings":"","what":"jfa 0.1.0","title":"jfa 0.1.0","text":"CRAN release: 2020-01-08 New features First version jfa package. package provides four functions: auditPrior(), planning(), sampling(), evaluation().","code":""}]
