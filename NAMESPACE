# Generated by roxygen2: do not edit by hand

S3method(plot,jfaDistr)
S3method(plot,jfaEvaluation)
S3method(plot,jfaFairness)
S3method(plot,jfaPlanning)
S3method(plot,jfaPosterior)
S3method(plot,jfaPredict)
S3method(plot,jfaPrior)
S3method(plot,jfaRv)
S3method(predict,jfaPosterior)
S3method(predict,jfaPrior)
S3method(print,jfaDistr)
S3method(print,jfaEvaluation)
S3method(print,jfaFairness)
S3method(print,jfaPlanning)
S3method(print,jfaPosterior)
S3method(print,jfaPredict)
S3method(print,jfaPrior)
S3method(print,jfaRv)
S3method(print,jfaSelection)
S3method(print,summary.jfaDistr)
S3method(print,summary.jfaEvaluation)
S3method(print,summary.jfaFairness)
S3method(print,summary.jfaPlanning)
S3method(print,summary.jfaPosterior)
S3method(print,summary.jfaPrior)
S3method(print,summary.jfaSelection)
S3method(summary,jfaDistr)
S3method(summary,jfaEvaluation)
S3method(summary,jfaFairness)
S3method(summary,jfaPlanning)
S3method(summary,jfaPosterior)
S3method(summary,jfaPrior)
S3method(summary,jfaSelection)
export(auditPrior)
export(digit_test)
export(evaluation)
export(fairness_measure_workflow)
export(model_fairness)
export(planning)
export(repeated_test)
export(selection)
import(Rcpp)
import(methods)
importFrom(rstan,sampling)
useDynLib(jfa, .registration = TRUE)
